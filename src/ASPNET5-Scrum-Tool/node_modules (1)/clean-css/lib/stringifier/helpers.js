var lineBreak = require('os').EOL;

var AT_RULE = 'at-rule';
var PROPERTY_SEPARATOR = ';';

function hasMoreProperties(tokens, index) ***REMOVED***
  for (var i = index, l = tokens.length; i < l; i++) ***REMOVED***
    if (typeof tokens[i] != 'string')
      return true;
  ***REMOVED***

  return false;
***REMOVED***

function supportsAfterClosingBrace(token) ***REMOVED***
  return token[0][0] == 'background' || token[0][0] == 'transform' || token[0][0] == 'src';
***REMOVED***

function isVariable(token, valueIndex) ***REMOVED***
  return token[valueIndex][0].indexOf('var(') === 0;
***REMOVED***

function afterClosingBrace(token, valueIndex) ***REMOVED***
  return token[valueIndex][0][token[valueIndex][0].length - 1] == ')' || token[valueIndex][0].indexOf('__ESCAPED_URL_CLEAN_CSS') === 0;
***REMOVED***

function afterComma(token, valueIndex) ***REMOVED***
  return token[valueIndex][0] == ',';
***REMOVED***

function afterSlash(token, valueIndex) ***REMOVED***
  return token[valueIndex][0] == '/';
***REMOVED***

function beforeComma(token, valueIndex) ***REMOVED***
  return token[valueIndex + 1] && token[valueIndex + 1][0] == ',';
***REMOVED***

function beforeSlash(token, valueIndex) ***REMOVED***
  return token[valueIndex + 1] && token[valueIndex + 1][0] == '/';
***REMOVED***

function inFilter(token) ***REMOVED***
  return token[0][0] == 'filter' || token[0][0] == '-ms-filter';
***REMOVED***

function inSpecialContext(token, valueIndex, context) ***REMOVED***
  return (!context.spaceAfterClosingBrace && supportsAfterClosingBrace(token) || isVariable(token, valueIndex)) && afterClosingBrace(token, valueIndex) ||
    beforeSlash(token, valueIndex) ||
    afterSlash(token, valueIndex) ||
    beforeComma(token, valueIndex) ||
    afterComma(token, valueIndex);
***REMOVED***

function selectors(tokens, context) ***REMOVED***
  var store = context.store;

  for (var i = 0, l = tokens.length; i < l; i++) ***REMOVED***
    store(tokens[i], context);

    if (i < l - 1)
      store(',', context);
  ***REMOVED***
***REMOVED***

function body(tokens, context) ***REMOVED***
  for (var i = 0, l = tokens.length; i < l; i++) ***REMOVED***
    property(tokens, i, i == l - 1, context);
  ***REMOVED***
***REMOVED***

function property(tokens, position, isLast, context) ***REMOVED***
  var store = context.store;
  var token = tokens[position];

  if (typeof token == 'string') ***REMOVED***
    store(token, context);
  ***REMOVED*** else if (token[0] == AT_RULE) ***REMOVED***
    propertyAtRule(token[1], isLast, context);
  ***REMOVED*** else ***REMOVED***
    store(token[0], context);
    store(':', context);
    value(tokens, position, isLast, context);
  ***REMOVED***
***REMOVED***

function propertyAtRule(value, isLast, context) ***REMOVED***
  var store = context.store;

  store(value, context);
  if (!isLast)
    store(PROPERTY_SEPARATOR, context);
***REMOVED***

function value(tokens, position, isLast, context) ***REMOVED***
  var store = context.store;
  var token = tokens[position];
  var isVariableDeclaration = token[0][0].indexOf('--') === 0;

  if (isVariableDeclaration && atRulesOrProperties(token[1])) ***REMOVED***
    store('***REMOVED***', context);
    body(token[1], context);
    store('***REMOVED***;', context);
    return;
  ***REMOVED***

  for (var j = 1, m = token.length; j < m; j++) ***REMOVED***
    store(token[j], context);

    if (j < m - 1 && (inFilter(token) || !inSpecialContext(token, j, context))) ***REMOVED***
      store(' ', context);
***REMOVED*** else if (j == m - 1 && !isLast && hasMoreProperties(tokens, position + 1)) ***REMOVED***
      store(PROPERTY_SEPARATOR, context);
***REMOVED***
  ***REMOVED***
***REMOVED***

function atRulesOrProperties(values) ***REMOVED***
  for (var i = 0, l = values.length; i < l; i++) ***REMOVED***
    if (values[i][0] == AT_RULE || Array.isArray(values[i][0]))
      return true;
  ***REMOVED***

  return false;
***REMOVED***

function all(tokens, context) ***REMOVED***
  var joinCharacter = context.keepBreaks ? lineBreak : '';
  var store = context.store;

  for (var i = 0, l = tokens.length; i < l; i++) ***REMOVED***
    var token = tokens[i];

    switch (token[0]) ***REMOVED***
      case 'at-rule':
      case 'text':
        store(token[1][0], context);
        store(joinCharacter, context);
        break;
      case 'block':
        selectors([token[1]], context);
        store('***REMOVED***', context);
        all(token[2], context);
        store('***REMOVED***', context);
        store(joinCharacter, context);
        break;
      case 'flat-block':
        selectors([token[1]], context);
        store('***REMOVED***', context);
        body(token[2], context);
        store('***REMOVED***', context);
        store(joinCharacter, context);
        break;
      default:
        selectors(token[1], context);
        store('***REMOVED***', context);
        body(token[2], context);
        store('***REMOVED***', context);
        store(joinCharacter, context);
***REMOVED***
  ***REMOVED***
***REMOVED***

module.exports = ***REMOVED***
  all: all,
  body: body,
  property: property,
  selectors: selectors,
  value: value
***REMOVED***;
