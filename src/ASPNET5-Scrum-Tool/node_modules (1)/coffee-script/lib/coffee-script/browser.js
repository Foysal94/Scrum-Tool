// Generated by CoffeeScript 1.10.0
(function() ***REMOVED***
  var CoffeeScript, compile, runScripts,
    indexOf = [].indexOf || function(item) ***REMOVED*** for (var i = 0, l = this.length; i < l; i++) ***REMOVED*** if (i in this && this[i] === item) return i; ***REMOVED*** return -1; ***REMOVED***;

  CoffeeScript = require('./coffee-script');

  CoffeeScript.require = require;

  compile = CoffeeScript.compile;

  CoffeeScript["eval"] = function(code, options) ***REMOVED***
    if (options == null) ***REMOVED***
      options = ***REMOVED******REMOVED***;
***REMOVED***
    if (options.bare == null) ***REMOVED***
      options.bare = true;
***REMOVED***
    return eval(compile(code, options));
  ***REMOVED***;

  CoffeeScript.run = function(code, options) ***REMOVED***
    if (options == null) ***REMOVED***
      options = ***REMOVED******REMOVED***;
***REMOVED***
    options.bare = true;
    options.shiftLine = true;
    return Function(compile(code, options))();
  ***REMOVED***;

  if (typeof window === "undefined" || window === null) ***REMOVED***
    return;
  ***REMOVED***

  if ((typeof btoa !== "undefined" && btoa !== null) && (typeof JSON !== "undefined" && JSON !== null) && (typeof unescape !== "undefined" && unescape !== null) && (typeof encodeURIComponent !== "undefined" && encodeURIComponent !== null)) ***REMOVED***
    compile = function(code, options) ***REMOVED***
      var js, ref, v3SourceMap;
      if (options == null) ***REMOVED***
        options = ***REMOVED******REMOVED***;
  ***REMOVED***
      options.sourceMap = true;
      options.inline = true;
      ref = CoffeeScript.compile(code, options), js = ref.js, v3SourceMap = ref.v3SourceMap;
      return js + "\n//# sourceMappingURL=data:application/json;base64," + (btoa(unescape(encodeURIComponent(v3SourceMap)))) + "\n//# sourceURL=coffeescript";
***REMOVED***;
  ***REMOVED***

  CoffeeScript.load = function(url, callback, options, hold) ***REMOVED***
    var xhr;
    if (options == null) ***REMOVED***
      options = ***REMOVED******REMOVED***;
***REMOVED***
    if (hold == null) ***REMOVED***
      hold = false;
***REMOVED***
    options.sourceFiles = [url];
    xhr = window.ActiveXObject ? new window.ActiveXObject('Microsoft.XMLHTTP') : new window.XMLHttpRequest();
    xhr.open('GET', url, true);
    if ('overrideMimeType' in xhr) ***REMOVED***
      xhr.overrideMimeType('text/plain');
***REMOVED***
    xhr.onreadystatechange = function() ***REMOVED***
      var param, ref;
      if (xhr.readyState === 4) ***REMOVED***
        if ((ref = xhr.status) === 0 || ref === 200) ***REMOVED***
          param = [xhr.responseText, options];
          if (!hold) ***REMOVED***
            CoffeeScript.run.apply(CoffeeScript, param);
  ***REMOVED***
***REMOVED*** else ***REMOVED***
          throw new Error("Could not load " + url);
***REMOVED***
        if (callback) ***REMOVED***
          return callback(param);
***REMOVED***
  ***REMOVED***
***REMOVED***;
    return xhr.send(null);
  ***REMOVED***;

  runScripts = function() ***REMOVED***
    var coffees, coffeetypes, execute, fn, i, index, j, len, s, script, scripts;
    scripts = window.document.getElementsByTagName('script');
    coffeetypes = ['text/coffeescript', 'text/literate-coffeescript'];
    coffees = (function() ***REMOVED***
      var j, len, ref, results;
      results = [];
      for (j = 0, len = scripts.length; j < len; j++) ***REMOVED***
        s = scripts[j];
        if (ref = s.type, indexOf.call(coffeetypes, ref) >= 0) ***REMOVED***
          results.push(s);
***REMOVED***
  ***REMOVED***
      return results;
***REMOVED***)();
    index = 0;
    execute = function() ***REMOVED***
      var param;
      param = coffees[index];
      if (param instanceof Array) ***REMOVED***
        CoffeeScript.run.apply(CoffeeScript, param);
        index++;
        return execute();
  ***REMOVED***
***REMOVED***;
    fn = function(script, i) ***REMOVED***
      var options, source;
      options = ***REMOVED***
        literate: script.type === coffeetypes[1]
  ***REMOVED***;
      source = script.src || script.getAttribute('data-src');
      if (source) ***REMOVED***
        return CoffeeScript.load(source, function(param) ***REMOVED***
          coffees[i] = param;
          return execute();
***REMOVED***, options, true);
  ***REMOVED*** else ***REMOVED***
        options.sourceFiles = ['embedded'];
        return coffees[i] = [script.innerHTML, options];
  ***REMOVED***
***REMOVED***;
    for (i = j = 0, len = coffees.length; j < len; i = ++j) ***REMOVED***
      script = coffees[i];
      fn(script, i);
***REMOVED***
    return execute();
  ***REMOVED***;

  if (window.addEventListener) ***REMOVED***
    window.addEventListener('DOMContentLoaded', runScripts, false);
  ***REMOVED*** else ***REMOVED***
    window.attachEvent('onload', runScripts);
  ***REMOVED***

***REMOVED***).call(this);
