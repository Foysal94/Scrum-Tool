// Generated by CoffeeScript 1.10.0
(function() ***REMOVED***
  var Parser, alt, alternatives, grammar, name, o, operators, token, tokens, unwrap;

  Parser = require('jison').Parser;

  unwrap = /^function\s*\(\)\s*\***REMOVED***\s*return\s*([\s\S]*);\s*\***REMOVED***/;

  o = function(patternString, action, options) ***REMOVED***
    var addLocationDataFn, match, patternCount;
    patternString = patternString.replace(/\s***REMOVED***2,***REMOVED***/g, ' ');
    patternCount = patternString.split(' ').length;
    if (!action) ***REMOVED***
      return [patternString, '$$ = $1;', options];
***REMOVED***
    action = (match = unwrap.exec(action)) ? match[1] : "(" + action + "())";
    action = action.replace(/\bnew /g, '$&yy.');
    action = action.replace(/\b(?:Block\.wrap|extend)\b/g, 'yy.$&');
    addLocationDataFn = function(first, last) ***REMOVED***
      if (!last) ***REMOVED***
        return "yy.addLocationDataFn(@" + first + ")";
  ***REMOVED*** else ***REMOVED***
        return "yy.addLocationDataFn(@" + first + ", @" + last + ")";
  ***REMOVED***
***REMOVED***;
    action = action.replace(/LOC\(([0-9]*)\)/g, addLocationDataFn('$1'));
    action = action.replace(/LOC\(([0-9]*),\s*([0-9]*)\)/g, addLocationDataFn('$1', '$2'));
    return [patternString, "$$ = " + (addLocationDataFn(1, patternCount)) + "(" + action + ");", options];
  ***REMOVED***;

  grammar = ***REMOVED***
    Root: [
      o('', function() ***REMOVED***
        return new Block;
  ***REMOVED***), o('Body')
    ],
    Body: [
      o('Line', function() ***REMOVED***
        return Block.wrap([$1]);
  ***REMOVED***), o('Body TERMINATOR Line', function() ***REMOVED***
        return $1.push($3);
  ***REMOVED***), o('Body TERMINATOR')
    ],
    Line: [o('Expression'), o('Statement')],
    Statement: [
      o('Return'), o('Comment'), o('STATEMENT', function() ***REMOVED***
        return new Literal($1);
  ***REMOVED***)
    ],
    Expression: [o('Value'), o('Invocation'), o('Code'), o('Operation'), o('Assign'), o('If'), o('Try'), o('While'), o('For'), o('Switch'), o('Class'), o('Throw')],
    Block: [
      o('INDENT OUTDENT', function() ***REMOVED***
        return new Block;
  ***REMOVED***), o('INDENT Body OUTDENT', function() ***REMOVED***
        return $2;
  ***REMOVED***)
    ],
    Identifier: [
      o('IDENTIFIER', function() ***REMOVED***
        return new Literal($1);
  ***REMOVED***)
    ],
    AlphaNumeric: [
      o('NUMBER', function() ***REMOVED***
        return new Literal($1);
  ***REMOVED***), o('String')
    ],
    String: [
      o('STRING', function() ***REMOVED***
        return new Literal($1);
  ***REMOVED***), o('STRING_START Body STRING_END', function() ***REMOVED***
        return new Parens($2);
  ***REMOVED***)
    ],
    Regex: [
      o('REGEX', function() ***REMOVED***
        return new Literal($1);
  ***REMOVED***), o('REGEX_START Invocation REGEX_END', function() ***REMOVED***
        return $2;
  ***REMOVED***)
    ],
    Literal: [
      o('AlphaNumeric'), o('JS', function() ***REMOVED***
        return new Literal($1);
  ***REMOVED***), o('Regex'), o('DEBUGGER', function() ***REMOVED***
        return new Literal($1);
  ***REMOVED***), o('UNDEFINED', function() ***REMOVED***
        return new Undefined;
  ***REMOVED***), o('NULL', function() ***REMOVED***
        return new Null;
  ***REMOVED***), o('BOOL', function() ***REMOVED***
        return new Bool($1);
  ***REMOVED***)
    ],
    Assign: [
      o('Assignable = Expression', function() ***REMOVED***
        return new Assign($1, $3);
  ***REMOVED***), o('Assignable = TERMINATOR Expression', function() ***REMOVED***
        return new Assign($1, $4);
  ***REMOVED***), o('Assignable = INDENT Expression OUTDENT', function() ***REMOVED***
        return new Assign($1, $4);
  ***REMOVED***)
    ],
    AssignObj: [
      o('ObjAssignable', function() ***REMOVED***
        return new Value($1);
  ***REMOVED***), o('ObjAssignable : Expression', function() ***REMOVED***
        return new Assign(LOC(1)(new Value($1)), $3, 'object', ***REMOVED***
          operatorToken: LOC(2)(new Literal($2))
***REMOVED***);
  ***REMOVED***), o('ObjAssignable : INDENT Expression OUTDENT', function() ***REMOVED***
        return new Assign(LOC(1)(new Value($1)), $4, 'object', ***REMOVED***
          operatorToken: LOC(2)(new Literal($2))
***REMOVED***);
  ***REMOVED***), o('SimpleObjAssignable = Expression', function() ***REMOVED***
        return new Assign(LOC(1)(new Value($1)), $3, null, ***REMOVED***
          operatorToken: LOC(2)(new Literal($2))
***REMOVED***);
  ***REMOVED***), o('SimpleObjAssignable = INDENT Expression OUTDENT', function() ***REMOVED***
        return new Assign(LOC(1)(new Value($1)), $4, null, ***REMOVED***
          operatorToken: LOC(2)(new Literal($2))
***REMOVED***);
  ***REMOVED***), o('Comment')
    ],
    SimpleObjAssignable: [o('Identifier'), o('ThisProperty')],
    ObjAssignable: [o('SimpleObjAssignable'), o('AlphaNumeric')],
    Return: [
      o('RETURN Expression', function() ***REMOVED***
        return new Return($2);
  ***REMOVED***), o('RETURN', function() ***REMOVED***
        return new Return;
  ***REMOVED***)
    ],
    Comment: [
      o('HERECOMMENT', function() ***REMOVED***
        return new Comment($1);
  ***REMOVED***)
    ],
    Code: [
      o('PARAM_START ParamList PARAM_END FuncGlyph Block', function() ***REMOVED***
        return new Code($2, $5, $4);
  ***REMOVED***), o('FuncGlyph Block', function() ***REMOVED***
        return new Code([], $2, $1);
  ***REMOVED***)
    ],
    FuncGlyph: [
      o('->', function() ***REMOVED***
        return 'func';
  ***REMOVED***), o('=>', function() ***REMOVED***
        return 'boundfunc';
  ***REMOVED***)
    ],
    OptComma: [o(''), o(',')],
    ParamList: [
      o('', function() ***REMOVED***
        return [];
  ***REMOVED***), o('Param', function() ***REMOVED***
        return [$1];
  ***REMOVED***), o('ParamList , Param', function() ***REMOVED***
        return $1.concat($3);
  ***REMOVED***), o('ParamList OptComma TERMINATOR Param', function() ***REMOVED***
        return $1.concat($4);
  ***REMOVED***), o('ParamList OptComma INDENT ParamList OptComma OUTDENT', function() ***REMOVED***
        return $1.concat($4);
  ***REMOVED***)
    ],
    Param: [
      o('ParamVar', function() ***REMOVED***
        return new Param($1);
  ***REMOVED***), o('ParamVar ...', function() ***REMOVED***
        return new Param($1, null, true);
  ***REMOVED***), o('ParamVar = Expression', function() ***REMOVED***
        return new Param($1, $3);
  ***REMOVED***), o('...', function() ***REMOVED***
        return new Expansion;
  ***REMOVED***)
    ],
    ParamVar: [o('Identifier'), o('ThisProperty'), o('Array'), o('Object')],
    Splat: [
      o('Expression ...', function() ***REMOVED***
        return new Splat($1);
  ***REMOVED***)
    ],
    SimpleAssignable: [
      o('Identifier', function() ***REMOVED***
        return new Value($1);
  ***REMOVED***), o('Value Accessor', function() ***REMOVED***
        return $1.add($2);
  ***REMOVED***), o('Invocation Accessor', function() ***REMOVED***
        return new Value($1, [].concat($2));
  ***REMOVED***), o('ThisProperty')
    ],
    Assignable: [
      o('SimpleAssignable'), o('Array', function() ***REMOVED***
        return new Value($1);
  ***REMOVED***), o('Object', function() ***REMOVED***
        return new Value($1);
  ***REMOVED***)
    ],
    Value: [
      o('Assignable'), o('Literal', function() ***REMOVED***
        return new Value($1);
  ***REMOVED***), o('Parenthetical', function() ***REMOVED***
        return new Value($1);
  ***REMOVED***), o('Range', function() ***REMOVED***
        return new Value($1);
  ***REMOVED***), o('This')
    ],
    Accessor: [
      o('.  Identifier', function() ***REMOVED***
        return new Access($2);
  ***REMOVED***), o('?. Identifier', function() ***REMOVED***
        return new Access($2, 'soak');
  ***REMOVED***), o(':: Identifier', function() ***REMOVED***
        return [LOC(1)(new Access(new Literal('prototype'))), LOC(2)(new Access($2))];
  ***REMOVED***), o('?:: Identifier', function() ***REMOVED***
        return [LOC(1)(new Access(new Literal('prototype'), 'soak')), LOC(2)(new Access($2))];
  ***REMOVED***), o('::', function() ***REMOVED***
        return new Access(new Literal('prototype'));
  ***REMOVED***), o('Index')
    ],
    Index: [
      o('INDEX_START IndexValue INDEX_END', function() ***REMOVED***
        return $2;
  ***REMOVED***), o('INDEX_SOAK  Index', function() ***REMOVED***
        return extend($2, ***REMOVED***
          soak: true
***REMOVED***);
  ***REMOVED***)
    ],
    IndexValue: [
      o('Expression', function() ***REMOVED***
        return new Index($1);
  ***REMOVED***), o('Slice', function() ***REMOVED***
        return new Slice($1);
  ***REMOVED***)
    ],
    Object: [
      o('***REMOVED*** AssignList OptComma ***REMOVED***', function() ***REMOVED***
        return new Obj($2, $1.generated);
  ***REMOVED***)
    ],
    AssignList: [
      o('', function() ***REMOVED***
        return [];
  ***REMOVED***), o('AssignObj', function() ***REMOVED***
        return [$1];
  ***REMOVED***), o('AssignList , AssignObj', function() ***REMOVED***
        return $1.concat($3);
  ***REMOVED***), o('AssignList OptComma TERMINATOR AssignObj', function() ***REMOVED***
        return $1.concat($4);
  ***REMOVED***), o('AssignList OptComma INDENT AssignList OptComma OUTDENT', function() ***REMOVED***
        return $1.concat($4);
  ***REMOVED***)
    ],
    Class: [
      o('CLASS', function() ***REMOVED***
        return new Class;
  ***REMOVED***), o('CLASS Block', function() ***REMOVED***
        return new Class(null, null, $2);
  ***REMOVED***), o('CLASS EXTENDS Expression', function() ***REMOVED***
        return new Class(null, $3);
  ***REMOVED***), o('CLASS EXTENDS Expression Block', function() ***REMOVED***
        return new Class(null, $3, $4);
  ***REMOVED***), o('CLASS SimpleAssignable', function() ***REMOVED***
        return new Class($2);
  ***REMOVED***), o('CLASS SimpleAssignable Block', function() ***REMOVED***
        return new Class($2, null, $3);
  ***REMOVED***), o('CLASS SimpleAssignable EXTENDS Expression', function() ***REMOVED***
        return new Class($2, $4);
  ***REMOVED***), o('CLASS SimpleAssignable EXTENDS Expression Block', function() ***REMOVED***
        return new Class($2, $4, $5);
  ***REMOVED***)
    ],
    Invocation: [
      o('Value OptFuncExist Arguments', function() ***REMOVED***
        return new Call($1, $3, $2);
  ***REMOVED***), o('Invocation OptFuncExist Arguments', function() ***REMOVED***
        return new Call($1, $3, $2);
  ***REMOVED***), o('SUPER', function() ***REMOVED***
        return new Call('super', [new Splat(new Literal('arguments'))]);
  ***REMOVED***), o('SUPER Arguments', function() ***REMOVED***
        return new Call('super', $2);
  ***REMOVED***)
    ],
    OptFuncExist: [
      o('', function() ***REMOVED***
        return false;
  ***REMOVED***), o('FUNC_EXIST', function() ***REMOVED***
        return true;
  ***REMOVED***)
    ],
    Arguments: [
      o('CALL_START CALL_END', function() ***REMOVED***
        return [];
  ***REMOVED***), o('CALL_START ArgList OptComma CALL_END', function() ***REMOVED***
        return $2;
  ***REMOVED***)
    ],
    This: [
      o('THIS', function() ***REMOVED***
        return new Value(new Literal('this'));
  ***REMOVED***), o('@', function() ***REMOVED***
        return new Value(new Literal('this'));
  ***REMOVED***)
    ],
    ThisProperty: [
      o('@ Identifier', function() ***REMOVED***
        return new Value(LOC(1)(new Literal('this')), [LOC(2)(new Access($2))], 'this');
  ***REMOVED***)
    ],
    Array: [
      o('[ ]', function() ***REMOVED***
        return new Arr([]);
  ***REMOVED***), o('[ ArgList OptComma ]', function() ***REMOVED***
        return new Arr($2);
  ***REMOVED***)
    ],
    RangeDots: [
      o('..', function() ***REMOVED***
        return 'inclusive';
  ***REMOVED***), o('...', function() ***REMOVED***
        return 'exclusive';
  ***REMOVED***)
    ],
    Range: [
      o('[ Expression RangeDots Expression ]', function() ***REMOVED***
        return new Range($2, $4, $3);
  ***REMOVED***)
    ],
    Slice: [
      o('Expression RangeDots Expression', function() ***REMOVED***
        return new Range($1, $3, $2);
  ***REMOVED***), o('Expression RangeDots', function() ***REMOVED***
        return new Range($1, null, $2);
  ***REMOVED***), o('RangeDots Expression', function() ***REMOVED***
        return new Range(null, $2, $1);
  ***REMOVED***), o('RangeDots', function() ***REMOVED***
        return new Range(null, null, $1);
  ***REMOVED***)
    ],
    ArgList: [
      o('Arg', function() ***REMOVED***
        return [$1];
  ***REMOVED***), o('ArgList , Arg', function() ***REMOVED***
        return $1.concat($3);
  ***REMOVED***), o('ArgList OptComma TERMINATOR Arg', function() ***REMOVED***
        return $1.concat($4);
  ***REMOVED***), o('INDENT ArgList OptComma OUTDENT', function() ***REMOVED***
        return $2;
  ***REMOVED***), o('ArgList OptComma INDENT ArgList OptComma OUTDENT', function() ***REMOVED***
        return $1.concat($4);
  ***REMOVED***)
    ],
    Arg: [
      o('Expression'), o('Splat'), o('...', function() ***REMOVED***
        return new Expansion;
  ***REMOVED***)
    ],
    SimpleArgs: [
      o('Expression'), o('SimpleArgs , Expression', function() ***REMOVED***
        return [].concat($1, $3);
  ***REMOVED***)
    ],
    Try: [
      o('TRY Block', function() ***REMOVED***
        return new Try($2);
  ***REMOVED***), o('TRY Block Catch', function() ***REMOVED***
        return new Try($2, $3[0], $3[1]);
  ***REMOVED***), o('TRY Block FINALLY Block', function() ***REMOVED***
        return new Try($2, null, null, $4);
  ***REMOVED***), o('TRY Block Catch FINALLY Block', function() ***REMOVED***
        return new Try($2, $3[0], $3[1], $5);
  ***REMOVED***)
    ],
    Catch: [
      o('CATCH Identifier Block', function() ***REMOVED***
        return [$2, $3];
  ***REMOVED***), o('CATCH Object Block', function() ***REMOVED***
        return [LOC(2)(new Value($2)), $3];
  ***REMOVED***), o('CATCH Block', function() ***REMOVED***
        return [null, $2];
  ***REMOVED***)
    ],
    Throw: [
      o('THROW Expression', function() ***REMOVED***
        return new Throw($2);
  ***REMOVED***)
    ],
    Parenthetical: [
      o('( Body )', function() ***REMOVED***
        return new Parens($2);
  ***REMOVED***), o('( INDENT Body OUTDENT )', function() ***REMOVED***
        return new Parens($3);
  ***REMOVED***)
    ],
    WhileSource: [
      o('WHILE Expression', function() ***REMOVED***
        return new While($2);
  ***REMOVED***), o('WHILE Expression WHEN Expression', function() ***REMOVED***
        return new While($2, ***REMOVED***
          guard: $4
***REMOVED***);
  ***REMOVED***), o('UNTIL Expression', function() ***REMOVED***
        return new While($2, ***REMOVED***
          invert: true
***REMOVED***);
  ***REMOVED***), o('UNTIL Expression WHEN Expression', function() ***REMOVED***
        return new While($2, ***REMOVED***
          invert: true,
          guard: $4
***REMOVED***);
  ***REMOVED***)
    ],
    While: [
      o('WhileSource Block', function() ***REMOVED***
        return $1.addBody($2);
  ***REMOVED***), o('Statement  WhileSource', function() ***REMOVED***
        return $2.addBody(LOC(1)(Block.wrap([$1])));
  ***REMOVED***), o('Expression WhileSource', function() ***REMOVED***
        return $2.addBody(LOC(1)(Block.wrap([$1])));
  ***REMOVED***), o('Loop', function() ***REMOVED***
        return $1;
  ***REMOVED***)
    ],
    Loop: [
      o('LOOP Block', function() ***REMOVED***
        return new While(LOC(1)(new Literal('true'))).addBody($2);
  ***REMOVED***), o('LOOP Expression', function() ***REMOVED***
        return new While(LOC(1)(new Literal('true'))).addBody(LOC(2)(Block.wrap([$2])));
  ***REMOVED***)
    ],
    For: [
      o('Statement  ForBody', function() ***REMOVED***
        return new For($1, $2);
  ***REMOVED***), o('Expression ForBody', function() ***REMOVED***
        return new For($1, $2);
  ***REMOVED***), o('ForBody    Block', function() ***REMOVED***
        return new For($2, $1);
  ***REMOVED***)
    ],
    ForBody: [
      o('FOR Range', function() ***REMOVED***
        return ***REMOVED***
          source: LOC(2)(new Value($2))
***REMOVED***;
  ***REMOVED***), o('FOR Range BY Expression', function() ***REMOVED***
        return ***REMOVED***
          source: LOC(2)(new Value($2)),
          step: $4
***REMOVED***;
  ***REMOVED***), o('ForStart ForSource', function() ***REMOVED***
        $2.own = $1.own;
        $2.name = $1[0];
        $2.index = $1[1];
        return $2;
  ***REMOVED***)
    ],
    ForStart: [
      o('FOR ForVariables', function() ***REMOVED***
        return $2;
  ***REMOVED***), o('FOR OWN ForVariables', function() ***REMOVED***
        $3.own = true;
        return $3;
  ***REMOVED***)
    ],
    ForValue: [
      o('Identifier'), o('ThisProperty'), o('Array', function() ***REMOVED***
        return new Value($1);
  ***REMOVED***), o('Object', function() ***REMOVED***
        return new Value($1);
  ***REMOVED***)
    ],
    ForVariables: [
      o('ForValue', function() ***REMOVED***
        return [$1];
  ***REMOVED***), o('ForValue , ForValue', function() ***REMOVED***
        return [$1, $3];
  ***REMOVED***)
    ],
    ForSource: [
      o('FORIN Expression', function() ***REMOVED***
        return ***REMOVED***
          source: $2
***REMOVED***;
  ***REMOVED***), o('FOROF Expression', function() ***REMOVED***
        return ***REMOVED***
          source: $2,
          object: true
***REMOVED***;
  ***REMOVED***), o('FORIN Expression WHEN Expression', function() ***REMOVED***
        return ***REMOVED***
          source: $2,
          guard: $4
***REMOVED***;
  ***REMOVED***), o('FOROF Expression WHEN Expression', function() ***REMOVED***
        return ***REMOVED***
          source: $2,
          guard: $4,
          object: true
***REMOVED***;
  ***REMOVED***), o('FORIN Expression BY Expression', function() ***REMOVED***
        return ***REMOVED***
          source: $2,
          step: $4
***REMOVED***;
  ***REMOVED***), o('FORIN Expression WHEN Expression BY Expression', function() ***REMOVED***
        return ***REMOVED***
          source: $2,
          guard: $4,
          step: $6
***REMOVED***;
  ***REMOVED***), o('FORIN Expression BY Expression WHEN Expression', function() ***REMOVED***
        return ***REMOVED***
          source: $2,
          step: $4,
          guard: $6
***REMOVED***;
  ***REMOVED***)
    ],
    Switch: [
      o('SWITCH Expression INDENT Whens OUTDENT', function() ***REMOVED***
        return new Switch($2, $4);
  ***REMOVED***), o('SWITCH Expression INDENT Whens ELSE Block OUTDENT', function() ***REMOVED***
        return new Switch($2, $4, $6);
  ***REMOVED***), o('SWITCH INDENT Whens OUTDENT', function() ***REMOVED***
        return new Switch(null, $3);
  ***REMOVED***), o('SWITCH INDENT Whens ELSE Block OUTDENT', function() ***REMOVED***
        return new Switch(null, $3, $5);
  ***REMOVED***)
    ],
    Whens: [
      o('When'), o('Whens When', function() ***REMOVED***
        return $1.concat($2);
  ***REMOVED***)
    ],
    When: [
      o('LEADING_WHEN SimpleArgs Block', function() ***REMOVED***
        return [[$2, $3]];
  ***REMOVED***), o('LEADING_WHEN SimpleArgs Block TERMINATOR', function() ***REMOVED***
        return [[$2, $3]];
  ***REMOVED***)
    ],
    IfBlock: [
      o('IF Expression Block', function() ***REMOVED***
        return new If($2, $3, ***REMOVED***
          type: $1
***REMOVED***);
  ***REMOVED***), o('IfBlock ELSE IF Expression Block', function() ***REMOVED***
        return $1.addElse(LOC(3, 5)(new If($4, $5, ***REMOVED***
          type: $3
***REMOVED***)));
  ***REMOVED***)
    ],
    If: [
      o('IfBlock'), o('IfBlock ELSE Block', function() ***REMOVED***
        return $1.addElse($3);
  ***REMOVED***), o('Statement  POST_IF Expression', function() ***REMOVED***
        return new If($3, LOC(1)(Block.wrap([$1])), ***REMOVED***
          type: $2,
          statement: true
***REMOVED***);
  ***REMOVED***), o('Expression POST_IF Expression', function() ***REMOVED***
        return new If($3, LOC(1)(Block.wrap([$1])), ***REMOVED***
          type: $2,
          statement: true
***REMOVED***);
  ***REMOVED***)
    ],
    Operation: [
      o('UNARY Expression', function() ***REMOVED***
        return new Op($1, $2);
  ***REMOVED***), o('UNARY_MATH Expression', function() ***REMOVED***
        return new Op($1, $2);
  ***REMOVED***), o('-     Expression', (function() ***REMOVED***
        return new Op('-', $2);
  ***REMOVED***), ***REMOVED***
        prec: 'UNARY_MATH'
  ***REMOVED***), o('+     Expression', (function() ***REMOVED***
        return new Op('+', $2);
  ***REMOVED***), ***REMOVED***
        prec: 'UNARY_MATH'
  ***REMOVED***), o('YIELD Statement', function() ***REMOVED***
        return new Op($1, $2);
  ***REMOVED***), o('YIELD Expression', function() ***REMOVED***
        return new Op($1, $2);
  ***REMOVED***), o('YIELD FROM Expression', function() ***REMOVED***
        return new Op($1.concat($2), $3);
  ***REMOVED***), o('-- SimpleAssignable', function() ***REMOVED***
        return new Op('--', $2);
  ***REMOVED***), o('++ SimpleAssignable', function() ***REMOVED***
        return new Op('++', $2);
  ***REMOVED***), o('SimpleAssignable --', function() ***REMOVED***
        return new Op('--', $1, null, true);
  ***REMOVED***), o('SimpleAssignable ++', function() ***REMOVED***
        return new Op('++', $1, null, true);
  ***REMOVED***), o('Expression ?', function() ***REMOVED***
        return new Existence($1);
  ***REMOVED***), o('Expression +  Expression', function() ***REMOVED***
        return new Op('+', $1, $3);
  ***REMOVED***), o('Expression -  Expression', function() ***REMOVED***
        return new Op('-', $1, $3);
  ***REMOVED***), o('Expression MATH     Expression', function() ***REMOVED***
        return new Op($2, $1, $3);
  ***REMOVED***), o('Expression **       Expression', function() ***REMOVED***
        return new Op($2, $1, $3);
  ***REMOVED***), o('Expression SHIFT    Expression', function() ***REMOVED***
        return new Op($2, $1, $3);
  ***REMOVED***), o('Expression COMPARE  Expression', function() ***REMOVED***
        return new Op($2, $1, $3);
  ***REMOVED***), o('Expression LOGIC    Expression', function() ***REMOVED***
        return new Op($2, $1, $3);
  ***REMOVED***), o('Expression RELATION Expression', function() ***REMOVED***
        if ($2.charAt(0) === '!') ***REMOVED***
          return new Op($2.slice(1), $1, $3).invert();
***REMOVED*** else ***REMOVED***
          return new Op($2, $1, $3);
***REMOVED***
  ***REMOVED***), o('SimpleAssignable COMPOUND_ASSIGN Expression', function() ***REMOVED***
        return new Assign($1, $3, $2);
  ***REMOVED***), o('SimpleAssignable COMPOUND_ASSIGN INDENT Expression OUTDENT', function() ***REMOVED***
        return new Assign($1, $4, $2);
  ***REMOVED***), o('SimpleAssignable COMPOUND_ASSIGN TERMINATOR Expression', function() ***REMOVED***
        return new Assign($1, $4, $2);
  ***REMOVED***), o('SimpleAssignable EXTENDS Expression', function() ***REMOVED***
        return new Extends($1, $3);
  ***REMOVED***)
    ]
  ***REMOVED***;

  operators = [['left', '.', '?.', '::', '?::'], ['left', 'CALL_START', 'CALL_END'], ['nonassoc', '++', '--'], ['left', '?'], ['right', 'UNARY'], ['right', '**'], ['right', 'UNARY_MATH'], ['left', 'MATH'], ['left', '+', '-'], ['left', 'SHIFT'], ['left', 'RELATION'], ['left', 'COMPARE'], ['left', 'LOGIC'], ['nonassoc', 'INDENT', 'OUTDENT'], ['right', 'YIELD'], ['right', '=', ':', 'COMPOUND_ASSIGN', 'RETURN', 'THROW', 'EXTENDS'], ['right', 'FORIN', 'FOROF', 'BY', 'WHEN'], ['right', 'IF', 'ELSE', 'FOR', 'WHILE', 'UNTIL', 'LOOP', 'SUPER', 'CLASS'], ['left', 'POST_IF']];

  tokens = [];

  for (name in grammar) ***REMOVED***
    alternatives = grammar[name];
    grammar[name] = (function() ***REMOVED***
      var i, j, len, len1, ref, results;
      results = [];
      for (i = 0, len = alternatives.length; i < len; i++) ***REMOVED***
        alt = alternatives[i];
        ref = alt[0].split(' ');
        for (j = 0, len1 = ref.length; j < len1; j++) ***REMOVED***
          token = ref[j];
          if (!grammar[token]) ***REMOVED***
            tokens.push(token);
  ***REMOVED***
***REMOVED***
        if (name === 'Root') ***REMOVED***
          alt[1] = "return " + alt[1];
***REMOVED***
        results.push(alt);
  ***REMOVED***
      return results;
***REMOVED***)();
  ***REMOVED***

  exports.parser = new Parser(***REMOVED***
    tokens: tokens.join(' '),
    bnf: grammar,
    operators: operators.reverse(),
    startSymbol: 'Root'
  ***REMOVED***);

***REMOVED***).call(this);
