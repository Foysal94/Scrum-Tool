// Generated by CoffeeScript 1.10.0
(function() ***REMOVED***
  var CoffeeScript, Module, binary, child_process, ext, findExtension, fork, helpers, i, len, loadFile, path, ref;

  CoffeeScript = require('./coffee-script');

  child_process = require('child_process');

  helpers = require('./helpers');

  path = require('path');

  loadFile = function(module, filename) ***REMOVED***
    var answer;
    answer = CoffeeScript._compileFile(filename, false);
    return module._compile(answer, filename);
  ***REMOVED***;

  if (require.extensions) ***REMOVED***
    ref = CoffeeScript.FILE_EXTENSIONS;
    for (i = 0, len = ref.length; i < len; i++) ***REMOVED***
      ext = ref[i];
      require.extensions[ext] = loadFile;
***REMOVED***
    Module = require('module');
    findExtension = function(filename) ***REMOVED***
      var curExtension, extensions;
      extensions = path.basename(filename).split('.');
      if (extensions[0] === '') ***REMOVED***
        extensions.shift();
  ***REMOVED***
      while (extensions.shift()) ***REMOVED***
        curExtension = '.' + extensions.join('.');
        if (Module._extensions[curExtension]) ***REMOVED***
          return curExtension;
***REMOVED***
  ***REMOVED***
      return '.js';
***REMOVED***;
    Module.prototype.load = function(filename) ***REMOVED***
      var extension;
      this.filename = filename;
      this.paths = Module._nodeModulePaths(path.dirname(filename));
      extension = findExtension(filename);
      Module._extensions[extension](this, filename);
      return this.loaded = true;
***REMOVED***;
  ***REMOVED***

  if (child_process) ***REMOVED***
    fork = child_process.fork;
    binary = require.resolve('../../bin/coffee');
    child_process.fork = function(path, args, options) ***REMOVED***
      if (helpers.isCoffee(path)) ***REMOVED***
        if (!Array.isArray(args)) ***REMOVED***
          options = args || ***REMOVED******REMOVED***;
          args = [];
***REMOVED***
        args = [path].concat(args);
        path = binary;
  ***REMOVED***
      return fork(path, args, options);
***REMOVED***;
  ***REMOVED***

***REMOVED***).call(this);
