// Generated by CoffeeScript 1.10.0
(function() ***REMOVED***
  var CoffeeScript, addHistory, addMultilineHandler, fs, getCommandId, merge, nodeREPL, path, ref, replDefaults, runInContext, updateSyntaxError, vm;

  fs = require('fs');

  path = require('path');

  vm = require('vm');

  nodeREPL = require('repl');

  CoffeeScript = require('./coffee-script');

  ref = require('./helpers'), merge = ref.merge, updateSyntaxError = ref.updateSyntaxError;

  replDefaults = ***REMOVED***
    prompt: 'coffee> ',
    historyFile: process.env.HOME ? path.join(process.env.HOME, '.coffee_history') : void 0,
    historyMaxInputSize: 10240,
    "eval": function(input, context, filename, cb) ***REMOVED***
      var Assign, Block, Literal, Value, ast, err, error, js, ref1, referencedVars, token, tokens;
      input = input.replace(/\uFF00/g, '\n');
      input = input.replace(/^\(([\s\S]*)\n\)$/m, '$1');
      ref1 = require('./nodes'), Block = ref1.Block, Assign = ref1.Assign, Value = ref1.Value, Literal = ref1.Literal;
      try ***REMOVED***
        tokens = CoffeeScript.tokens(input);
        referencedVars = (function() ***REMOVED***
          var i, len, results;
          results = [];
          for (i = 0, len = tokens.length; i < len; i++) ***REMOVED***
            token = tokens[i];
            if (token.variable) ***REMOVED***
              results.push(token[1]);
***REMOVED***
  ***REMOVED***
          return results;
***REMOVED***)();
        ast = CoffeeScript.nodes(tokens);
        ast = new Block([new Assign(new Value(new Literal('_')), ast, '=')]);
        js = ast.compile(***REMOVED***
          bare: true,
          locals: Object.keys(context),
          referencedVars: referencedVars
***REMOVED***);
        return cb(null, runInContext(js, context, filename));
  ***REMOVED*** catch (error) ***REMOVED***
        err = error;
        updateSyntaxError(err, input);
        return cb(err);
  ***REMOVED***
***REMOVED***
  ***REMOVED***;

  runInContext = function(js, context, filename) ***REMOVED***
    if (context === global) ***REMOVED***
      return vm.runInThisContext(js, filename);
***REMOVED*** else ***REMOVED***
      return vm.runInContext(js, context, filename);
***REMOVED***
  ***REMOVED***;

  addMultilineHandler = function(repl) ***REMOVED***
    var inputStream, multiline, nodeLineListener, origPrompt, outputStream, ref1, rli;
    rli = repl.rli, inputStream = repl.inputStream, outputStream = repl.outputStream;
    origPrompt = (ref1 = repl._prompt) != null ? ref1 : repl.prompt;
    multiline = ***REMOVED***
      enabled: false,
      initialPrompt: origPrompt.replace(/^[^> ]*/, function(x) ***REMOVED***
        return x.replace(/./g, '-');
  ***REMOVED***),
      prompt: origPrompt.replace(/^[^> ]*>?/, function(x) ***REMOVED***
        return x.replace(/./g, '.');
  ***REMOVED***),
      buffer: ''
***REMOVED***;
    nodeLineListener = rli.listeners('line')[0];
    rli.removeListener('line', nodeLineListener);
    rli.on('line', function(cmd) ***REMOVED***
      if (multiline.enabled) ***REMOVED***
        multiline.buffer += cmd + "\n";
        rli.setPrompt(multiline.prompt);
        rli.prompt(true);
  ***REMOVED*** else ***REMOVED***
        rli.setPrompt(origPrompt);
        nodeLineListener(cmd);
  ***REMOVED***
***REMOVED***);
    return inputStream.on('keypress', function(char, key) ***REMOVED***
      if (!(key && key.ctrl && !key.meta && !key.shift && key.name === 'v')) ***REMOVED***
        return;
  ***REMOVED***
      if (multiline.enabled) ***REMOVED***
        if (!multiline.buffer.match(/\n/)) ***REMOVED***
          multiline.enabled = !multiline.enabled;
          rli.setPrompt(origPrompt);
          rli.prompt(true);
          return;
***REMOVED***
        if ((rli.line != null) && !rli.line.match(/^\s*$/)) ***REMOVED***
          return;
***REMOVED***
        multiline.enabled = !multiline.enabled;
        rli.line = '';
        rli.cursor = 0;
        rli.output.cursorTo(0);
        rli.output.clearLine(1);
        multiline.buffer = multiline.buffer.replace(/\n/g, '\uFF00');
        rli.emit('line', multiline.buffer);
        multiline.buffer = '';
  ***REMOVED*** else ***REMOVED***
        multiline.enabled = !multiline.enabled;
        rli.setPrompt(multiline.initialPrompt);
        rli.prompt(true);
  ***REMOVED***
***REMOVED***);
  ***REMOVED***;

  addHistory = function(repl, filename, maxSize) ***REMOVED***
    var buffer, fd, lastLine, readFd, size, stat;
    lastLine = null;
    try ***REMOVED***
      stat = fs.statSync(filename);
      size = Math.min(maxSize, stat.size);
      readFd = fs.openSync(filename, 'r');
      buffer = new Buffer(size);
      fs.readSync(readFd, buffer, 0, size, stat.size - size);
      fs.close(readFd);
      repl.rli.history = buffer.toString().split('\n').reverse();
      if (stat.size > maxSize) ***REMOVED***
        repl.rli.history.pop();
  ***REMOVED***
      if (repl.rli.history[0] === '') ***REMOVED***
        repl.rli.history.shift();
  ***REMOVED***
      repl.rli.historyIndex = -1;
      lastLine = repl.rli.history[0];
***REMOVED*** catch (undefined) ***REMOVED******REMOVED***
    fd = fs.openSync(filename, 'a');
    repl.rli.addListener('line', function(code) ***REMOVED***
      if (code && code.length && code !== '.history' && lastLine !== code) ***REMOVED***
        fs.write(fd, code + "\n");
        return lastLine = code;
  ***REMOVED***
***REMOVED***);
    repl.on('exit', function() ***REMOVED***
      return fs.close(fd);
***REMOVED***);
    return repl.commands[getCommandId(repl, 'history')] = ***REMOVED***
      help: 'Show command history',
      action: function() ***REMOVED***
        repl.outputStream.write((repl.rli.history.slice(0).reverse().join('\n')) + "\n");
        return repl.displayPrompt();
  ***REMOVED***
***REMOVED***;
  ***REMOVED***;

  getCommandId = function(repl, commandName) ***REMOVED***
    var commandsHaveLeadingDot;
    commandsHaveLeadingDot = repl.commands['.help'] != null;
    if (commandsHaveLeadingDot) ***REMOVED***
      return "." + commandName;
***REMOVED*** else ***REMOVED***
      return commandName;
***REMOVED***
  ***REMOVED***;

  module.exports = ***REMOVED***
    start: function(opts) ***REMOVED***
      var build, major, minor, ref1, repl;
      if (opts == null) ***REMOVED***
        opts = ***REMOVED******REMOVED***;
  ***REMOVED***
      ref1 = process.versions.node.split('.').map(function(n) ***REMOVED***
        return parseInt(n);
  ***REMOVED***), major = ref1[0], minor = ref1[1], build = ref1[2];
      if (major === 0 && minor < 8) ***REMOVED***
        console.warn("Node 0.8.0+ required for CoffeeScript REPL");
        process.exit(1);
  ***REMOVED***
      CoffeeScript.register();
      process.argv = ['coffee'].concat(process.argv.slice(2));
      opts = merge(replDefaults, opts);
      repl = nodeREPL.start(opts);
      if (opts.prelude) ***REMOVED***
        runInContext(opts.prelude, repl.context, 'prelude');
  ***REMOVED***
      repl.on('exit', function() ***REMOVED***
        if (!repl.rli.closed) ***REMOVED***
          return repl.outputStream.write('\n');
***REMOVED***
  ***REMOVED***);
      addMultilineHandler(repl);
      if (opts.historyFile) ***REMOVED***
        addHistory(repl, opts.historyFile, opts.historyMaxInputSize);
  ***REMOVED***
      repl.commands[getCommandId(repl, 'load')].help = 'Load code from a file into this REPL session';
      return repl;
***REMOVED***
  ***REMOVED***;

***REMOVED***).call(this);
