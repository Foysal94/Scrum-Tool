// Generated by CoffeeScript 1.10.0
(function() ***REMOVED***
  var Scope,
    indexOf = [].indexOf || function(item) ***REMOVED*** for (var i = 0, l = this.length; i < l; i++) ***REMOVED*** if (i in this && this[i] === item) return i; ***REMOVED*** return -1; ***REMOVED***;

  exports.Scope = Scope = (function() ***REMOVED***
    function Scope(parent, expressions, method, referencedVars) ***REMOVED***
      var ref, ref1;
      this.parent = parent;
      this.expressions = expressions;
      this.method = method;
      this.referencedVars = referencedVars;
      this.variables = [
***REMOVED***
          name: 'arguments',
          type: 'arguments'
***REMOVED***
      ];
      this.positions = ***REMOVED******REMOVED***;
      if (!this.parent) ***REMOVED***
        this.utilities = ***REMOVED******REMOVED***;
  ***REMOVED***
      this.root = (ref = (ref1 = this.parent) != null ? ref1.root : void 0) != null ? ref : this;
***REMOVED***

    Scope.prototype.add = function(name, type, immediate) ***REMOVED***
      if (this.shared && !immediate) ***REMOVED***
        return this.parent.add(name, type, immediate);
  ***REMOVED***
      if (Object.prototype.hasOwnProperty.call(this.positions, name)) ***REMOVED***
        return this.variables[this.positions[name]].type = type;
  ***REMOVED*** else ***REMOVED***
        return this.positions[name] = this.variables.push(***REMOVED***
          name: name,
          type: type
***REMOVED***) - 1;
  ***REMOVED***
***REMOVED***;

    Scope.prototype.namedMethod = function() ***REMOVED***
      var ref;
      if (((ref = this.method) != null ? ref.name : void 0) || !this.parent) ***REMOVED***
        return this.method;
  ***REMOVED***
      return this.parent.namedMethod();
***REMOVED***;

    Scope.prototype.find = function(name) ***REMOVED***
      if (this.check(name)) ***REMOVED***
        return true;
  ***REMOVED***
      this.add(name, 'var');
      return false;
***REMOVED***;

    Scope.prototype.parameter = function(name) ***REMOVED***
      if (this.shared && this.parent.check(name, true)) ***REMOVED***
        return;
  ***REMOVED***
      return this.add(name, 'param');
***REMOVED***;

    Scope.prototype.check = function(name) ***REMOVED***
      var ref;
      return !!(this.type(name) || ((ref = this.parent) != null ? ref.check(name) : void 0));
***REMOVED***;

    Scope.prototype.temporary = function(name, index, single) ***REMOVED***
      if (single == null) ***REMOVED***
        single = false;
  ***REMOVED***
      if (single) ***REMOVED***
        return (index + parseInt(name, 36)).toString(36).replace(/\d/g, 'a');
  ***REMOVED*** else ***REMOVED***
        return name + (index || '');
  ***REMOVED***
***REMOVED***;

    Scope.prototype.type = function(name) ***REMOVED***
      var i, len, ref, v;
      ref = this.variables;
      for (i = 0, len = ref.length; i < len; i++) ***REMOVED***
        v = ref[i];
        if (v.name === name) ***REMOVED***
          return v.type;
***REMOVED***
  ***REMOVED***
      return null;
***REMOVED***;

    Scope.prototype.freeVariable = function(name, options) ***REMOVED***
      var index, ref, temp;
      if (options == null) ***REMOVED***
        options = ***REMOVED******REMOVED***;
  ***REMOVED***
      index = 0;
      while (true) ***REMOVED***
        temp = this.temporary(name, index, options.single);
        if (!(this.check(temp) || indexOf.call(this.root.referencedVars, temp) >= 0)) ***REMOVED***
          break;
***REMOVED***
        index++;
  ***REMOVED***
      if ((ref = options.reserve) != null ? ref : true) ***REMOVED***
        this.add(temp, 'var', true);
  ***REMOVED***
      return temp;
***REMOVED***;

    Scope.prototype.assign = function(name, value) ***REMOVED***
      this.add(name, ***REMOVED***
        value: value,
        assigned: true
  ***REMOVED***, true);
      return this.hasAssignments = true;
***REMOVED***;

    Scope.prototype.hasDeclarations = function() ***REMOVED***
      return !!this.declaredVariables().length;
***REMOVED***;

    Scope.prototype.declaredVariables = function() ***REMOVED***
      var v;
      return ((function() ***REMOVED***
        var i, len, ref, results;
        ref = this.variables;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) ***REMOVED***
          v = ref[i];
          if (v.type === 'var') ***REMOVED***
            results.push(v.name);
  ***REMOVED***
***REMOVED***
        return results;
  ***REMOVED***).call(this)).sort();
***REMOVED***;

    Scope.prototype.assignedVariables = function() ***REMOVED***
      var i, len, ref, results, v;
      ref = this.variables;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) ***REMOVED***
        v = ref[i];
        if (v.type.assigned) ***REMOVED***
          results.push(v.name + " = " + v.type.value);
***REMOVED***
  ***REMOVED***
      return results;
***REMOVED***;

    return Scope;

  ***REMOVED***)();

***REMOVED***).call(this);
