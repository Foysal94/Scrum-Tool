// Generated by CoffeeScript 1.10.0
(function() ***REMOVED***
  var LineMap, SourceMap;

  LineMap = (function() ***REMOVED***
    function LineMap(line1) ***REMOVED***
      this.line = line1;
      this.columns = [];
***REMOVED***

    LineMap.prototype.add = function(column, arg, options) ***REMOVED***
      var sourceColumn, sourceLine;
      sourceLine = arg[0], sourceColumn = arg[1];
      if (options == null) ***REMOVED***
        options = ***REMOVED******REMOVED***;
  ***REMOVED***
      if (this.columns[column] && options.noReplace) ***REMOVED***
        return;
  ***REMOVED***
      return this.columns[column] = ***REMOVED***
        line: this.line,
        column: column,
        sourceLine: sourceLine,
        sourceColumn: sourceColumn
  ***REMOVED***;
***REMOVED***;

    LineMap.prototype.sourceLocation = function(column) ***REMOVED***
      var mapping;
      while (!((mapping = this.columns[column]) || (column <= 0))) ***REMOVED***
        column--;
  ***REMOVED***
      return mapping && [mapping.sourceLine, mapping.sourceColumn];
***REMOVED***;

    return LineMap;

  ***REMOVED***)();

  SourceMap = (function() ***REMOVED***
    var BASE64_CHARS, VLQ_CONTINUATION_BIT, VLQ_SHIFT, VLQ_VALUE_MASK;

    function SourceMap() ***REMOVED***
      this.lines = [];
***REMOVED***

    SourceMap.prototype.add = function(sourceLocation, generatedLocation, options) ***REMOVED***
      var base, column, line, lineMap;
      if (options == null) ***REMOVED***
        options = ***REMOVED******REMOVED***;
  ***REMOVED***
      line = generatedLocation[0], column = generatedLocation[1];
      lineMap = ((base = this.lines)[line] || (base[line] = new LineMap(line)));
      return lineMap.add(column, sourceLocation, options);
***REMOVED***;

    SourceMap.prototype.sourceLocation = function(arg) ***REMOVED***
      var column, line, lineMap;
      line = arg[0], column = arg[1];
      while (!((lineMap = this.lines[line]) || (line <= 0))) ***REMOVED***
        line--;
  ***REMOVED***
      return lineMap && lineMap.sourceLocation(column);
***REMOVED***;

    SourceMap.prototype.generate = function(options, code) ***REMOVED***
      var buffer, i, j, lastColumn, lastSourceColumn, lastSourceLine, len, len1, lineMap, lineNumber, mapping, needComma, ref, ref1, v3, writingline;
      if (options == null) ***REMOVED***
        options = ***REMOVED******REMOVED***;
  ***REMOVED***
      if (code == null) ***REMOVED***
        code = null;
  ***REMOVED***
      writingline = 0;
      lastColumn = 0;
      lastSourceLine = 0;
      lastSourceColumn = 0;
      needComma = false;
      buffer = "";
      ref = this.lines;
      for (lineNumber = i = 0, len = ref.length; i < len; lineNumber = ++i) ***REMOVED***
        lineMap = ref[lineNumber];
        if (lineMap) ***REMOVED***
          ref1 = lineMap.columns;
          for (j = 0, len1 = ref1.length; j < len1; j++) ***REMOVED***
            mapping = ref1[j];
            if (!(mapping)) ***REMOVED***
              continue;
***REMOVED***
            while (writingline < mapping.line) ***REMOVED***
              lastColumn = 0;
              needComma = false;
              buffer += ";";
              writingline++;
***REMOVED***
            if (needComma) ***REMOVED***
              buffer += ",";
              needComma = false;
***REMOVED***
            buffer += this.encodeVlq(mapping.column - lastColumn);
            lastColumn = mapping.column;
            buffer += this.encodeVlq(0);
            buffer += this.encodeVlq(mapping.sourceLine - lastSourceLine);
            lastSourceLine = mapping.sourceLine;
            buffer += this.encodeVlq(mapping.sourceColumn - lastSourceColumn);
            lastSourceColumn = mapping.sourceColumn;
            needComma = true;
  ***REMOVED***
***REMOVED***
  ***REMOVED***
      v3 = ***REMOVED***
        version: 3,
        file: options.generatedFile || '',
        sourceRoot: options.sourceRoot || '',
        sources: options.sourceFiles || [''],
        names: [],
        mappings: buffer
  ***REMOVED***;
      if (options.inline) ***REMOVED***
        v3.sourcesContent = [code];
  ***REMOVED***
      return JSON.stringify(v3, null, 2);
***REMOVED***;

    VLQ_SHIFT = 5;

    VLQ_CONTINUATION_BIT = 1 << VLQ_SHIFT;

    VLQ_VALUE_MASK = VLQ_CONTINUATION_BIT - 1;

    SourceMap.prototype.encodeVlq = function(value) ***REMOVED***
      var answer, nextChunk, signBit, valueToEncode;
      answer = '';
      signBit = value < 0 ? 1 : 0;
      valueToEncode = (Math.abs(value) << 1) + signBit;
      while (valueToEncode || !answer) ***REMOVED***
        nextChunk = valueToEncode & VLQ_VALUE_MASK;
        valueToEncode = valueToEncode >> VLQ_SHIFT;
        if (valueToEncode) ***REMOVED***
          nextChunk |= VLQ_CONTINUATION_BIT;
***REMOVED***
        answer += this.encodeBase64(nextChunk);
  ***REMOVED***
      return answer;
***REMOVED***;

    BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

    SourceMap.prototype.encodeBase64 = function(value) ***REMOVED***
      return BASE64_CHARS[value] || (function() ***REMOVED***
        throw new Error("Cannot Base64 encode value: " + value);
  ***REMOVED***)();
***REMOVED***;

    return SourceMap;

  ***REMOVED***)();

  module.exports = SourceMap;

***REMOVED***).call(this);
