/*!
 * node-sass: lib/render.js
 */

var chalk = require('chalk'),
    fs = require('fs'),
    mkdirp = require('mkdirp'),
    path = require('path'),
    sass = require('./');

/**
 * Render
 *
 * @param ***REMOVED***Object***REMOVED*** options
 * @param ***REMOVED***Object***REMOVED*** emitter
 * @api public
 */

module.exports = function(options, emitter) ***REMOVED***
  var renderOptions = ***REMOVED***
    includePaths: options.includePath,
    omitSourceMapUrl: options.omitSourceMapUrl,
    indentedSyntax: options.indentedSyntax,
    outFile: options.dest,
    outputStyle: options.outputStyle,
    precision: options.precision,
    sourceComments: options.sourceComments,
    sourceMapEmbed: options.sourceMapEmbed,
    sourceMapContents: options.sourceMapContents,
    sourceMap: options.sourceMap,
    sourceMapRoot: options.sourceMapRoot,
    importer: options.importer,
    functions: options.functions,
    indentWidth: options.indentWidth,
    indentType: options.indentType,
    linefeed: options.linefeed
  ***REMOVED***;

  if (options.data) ***REMOVED***
    renderOptions.data = options.data;
  ***REMOVED*** else if (options.src) ***REMOVED***
    renderOptions.file = options.src;
  ***REMOVED***

  var sourceMap = options.sourceMap;
  var destination = options.dest;
  var stdin = options.stdin;

  var success = function(result) ***REMOVED***
    var todo = 1;
    var done = function() ***REMOVED***
      if (--todo <= 0) ***REMOVED***
        emitter.emit('done');
  ***REMOVED***
***REMOVED***;

    if (!destination || stdin) ***REMOVED***
      emitter.emit('log', result.css.toString());

      if (sourceMap && !options.sourceMapEmbed) ***REMOVED***
        emitter.emit('log', result.map.toString());
  ***REMOVED***

      return done();
***REMOVED***

    emitter.emit('warn', chalk.green('Rendering Complete, saving .css file...'));

    mkdirp(path.dirname(destination), function(err) ***REMOVED***
      if (err) ***REMOVED***
        return emitter.emit('error', chalk.red(err));
  ***REMOVED***

      fs.writeFile(destination, result.css.toString(), function(err) ***REMOVED***
        if (err) ***REMOVED***
          return emitter.emit('error', chalk.red(err));
***REMOVED***

        emitter.emit('warn', chalk.green('Wrote CSS to ' + destination));
        emitter.emit('write', err, destination, result.css.toString());
        done();
  ***REMOVED***);
***REMOVED***);

    if (sourceMap) ***REMOVED***
      todo++;

      mkdirp(path.dirname(sourceMap), function(err) ***REMOVED***
        if (err) ***REMOVED***
          return emitter.emit('error', chalk.red(err));
***REMOVED***
        fs.writeFile(sourceMap, result.map, function(err) ***REMOVED***
          if (err) ***REMOVED***
            return emitter.emit('error', chalk.red('Error' + err));
  ***REMOVED***

          emitter.emit('warn', chalk.green('Wrote Source Map to ' + sourceMap));
          emitter.emit('write-source-map', err, sourceMap, result.map);
          done();
***REMOVED***);
  ***REMOVED***);
***REMOVED***

    emitter.emit('render', result.css.toString());
  ***REMOVED***;

  var error = function(error) ***REMOVED***
    emitter.emit('error', chalk.red(JSON.stringify(error, null, 2)));
  ***REMOVED***;

  var renderCallback = function(err, result) ***REMOVED***
    if (err) ***REMOVED***
      error(err);
***REMOVED***
    else ***REMOVED***
      success(result);
***REMOVED***
  ***REMOVED***;

  sass.render(renderOptions, renderCallback);
***REMOVED***;
