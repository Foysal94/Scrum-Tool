/*!
 * node-sass: scripts/build.js
 */

var eol = require('os').EOL,
    pkg = require('../package.json'),
    fs = require('fs'),
    mkdir = require('mkdirp'),
    path = require('path'),
    spawn = require('cross-spawn');

require('../lib/extensions');

/**
 * After build
 *
 * @param ***REMOVED***Object***REMOVED*** options
 * @api private
 */

function afterBuild(options) ***REMOVED***
  var install = process.sass.binaryPath;
  var target = path.join(__dirname, '..', 'build',
    options.debug ? 'Debug' : process.config.target_defaults.default_configuration,
    'binding.node');

  mkdir(path.dirname(install), function(err) ***REMOVED***
    if (err && err.code !== 'EEXIST') ***REMOVED***
      console.error(err.message);
      return;
***REMOVED***

    fs.stat(target, function(err) ***REMOVED***
      if (err) ***REMOVED***
        console.error('Build succeeded but target not found');
        return;
  ***REMOVED***

      fs.rename(target, install, function(err) ***REMOVED***
        if (err) ***REMOVED***
          console.error(err.message);
          return;
***REMOVED***

        console.log('Installed in `', install, '`');
  ***REMOVED***);
***REMOVED***);
  ***REMOVED***);
***REMOVED***

/**
 * manageProcess
 *
 * @param ***REMOVED***ChildProcess***REMOVED*** proc
 * @param ***REMOVED***Function***REMOVED*** cb
 * @api private
 */

function manageProcess(proc, cb) ***REMOVED***
  var errorMsg = '';
  proc.stderr.on('data', function(data) ***REMOVED***
    errorMsg += data.toString();
  ***REMOVED***);
  proc.on('close', function(code) ***REMOVED***
    cb(code === 0 ? null : ***REMOVED*** message: errorMsg ***REMOVED***);
  ***REMOVED***);
***REMOVED***

/**
 * initSubmodules
 *
 * @param ***REMOVED***Function***REMOVED*** cb
 * @api private
 */

function initSubmodules(cb) ***REMOVED***
  console.log('Detected a git install');
  console.log('Cloning libSass into src/libsass');

  var clone = spawn('git', ['clone', 'git@github.com:sass/libsass.git', './src/libsass']);
  manageProcess(clone, function(err) ***REMOVED***
    if (err) ***REMOVED***
      cb(err);
      return;
***REMOVED***

    console.log('Checking out libsass to ' + pkg.libsass);

    var checkout = spawn('git', ['checkout', pkg.libsass], ***REMOVED*** cwd: './src/libsass' ***REMOVED***);
    manageProcess(checkout, function(err) ***REMOVED***
      cb(err);
***REMOVED***);
  ***REMOVED***);
***REMOVED***

/**
 * installGitDependencies
 *
 * @param ***REMOVED***Function***REMOVED*** cb
 * @api private
 */

function installGitDependencies(options, cb) ***REMOVED***
  var libsassPath = './src/libsass';

  if (process.env.LIBSASS_EXT || options.libsassExt) ***REMOVED***
    cb();
  ***REMOVED*** else if (fs.access) ***REMOVED*** // node 0.12+, iojs 1.0.0+
    fs.access(libsassPath, fs.R_OK, function(err) ***REMOVED***
      err && err.code === 'ENOENT' ? initSubmodules(cb) : cb();
***REMOVED***);
  ***REMOVED*** else ***REMOVED*** // node < 0.12
    fs.exists(libsassPath, function(exists) ***REMOVED***
      exists ? cb() : initSubmodules(cb);
***REMOVED***);
  ***REMOVED***
***REMOVED***

/**
 * Build
 *
 * @param ***REMOVED***Object***REMOVED*** options
 * @api private
 */

function build(options) ***REMOVED***
  installGitDependencies(options, function(err) ***REMOVED***
    if (err) ***REMOVED***
      console.error(err.message);
      process.exit(1);
***REMOVED***

    var args = [require.resolve(path.join('node-gyp', 'bin', 'node-gyp.js')), 'rebuild', '--verbose'].concat(
      ['libsass_ext', 'libsass_cflags', 'libsass_ldflags', 'libsass_library'].map(function(subject) ***REMOVED***
        return ['--', subject, '=', process.env[subject.toUpperCase()] || ''].join('');
  ***REMOVED***)).concat(options.args);

    console.log(['Building:', process.sass.runtime.execPath].concat(args).join(' '));

    var proc = spawn(process.sass.runtime.execPath, args, ***REMOVED***
      stdio: [0, 1, 2]
***REMOVED***);

    proc.on('exit', function(errorCode) ***REMOVED***
      if (!errorCode) ***REMOVED***
        afterBuild(options);

        return;
  ***REMOVED***

      console.error(errorCode === 127 ? 'node-gyp not found!' : 'Build failed');
      process.exit(1);
***REMOVED***);
  ***REMOVED***);
***REMOVED***

/**
 * Parse arguments
 *
 * @param ***REMOVED***Array***REMOVED*** args
 * @api private
 */

function parseArgs(args) ***REMOVED***
  var options = ***REMOVED***
    arch: process.arch,
    platform: process.platform
  ***REMOVED***;

  options.args = args.filter(function(arg) ***REMOVED***
    if (arg === '-f' || arg === '--force') ***REMOVED***
      options.force = true;
      return false;
***REMOVED*** else if (arg.substring(0, 13) === '--target_arch') ***REMOVED***
      options.arch = arg.substring(14);
***REMOVED*** else if (arg === '-d' || arg === '--debug') ***REMOVED***
      options.debug = true;
***REMOVED*** else if (arg.substring(0, 13) === '--libsass_ext' && arg.substring(14) !== 'no') ***REMOVED***
      options.libsassExt = true;
***REMOVED***

    return true;
  ***REMOVED***);

  return options;
***REMOVED***

/**
 * Test for pre-built library
 *
 * @param ***REMOVED***Object***REMOVED*** options
 * @api private
 */

function testBinary(options) ***REMOVED***
  if (options.force || process.env.SASS_FORCE_BUILD) ***REMOVED***
    return build(options);
  ***REMOVED***

  try ***REMOVED***
    process.sass.getBinaryPath(true);
  ***REMOVED*** catch (e) ***REMOVED***
    return build(options);
  ***REMOVED***

  console.log('`', process.sass.binaryPath, '` exists.', eol, 'testing binary.');

  try ***REMOVED***
    require('../').renderSync(***REMOVED***
      data: 's ***REMOVED*** a: ss ***REMOVED***'
***REMOVED***);

    console.log('Binary is fine; exiting.');
  ***REMOVED*** catch (e) ***REMOVED***
    console.log(['Problem with the binary.', 'Manual build incoming.'].join(eol));

    return build(options);
  ***REMOVED***
***REMOVED***

/**
 * Apply arguments and run
 */

testBinary(parseArgs(process.argv.slice(2)));
