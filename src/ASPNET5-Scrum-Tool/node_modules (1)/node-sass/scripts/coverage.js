/*!
 * node-sass: scripts/coverage.js
 */

var Mocha = require('mocha'),
    fs = require('fs'),
    path = require('path'),
    mkdirp = require('mkdirp'),
    coveralls = require('coveralls'),
    Instrumenter = require('istanbul').Instrumenter,
    Report = require('istanbul').Report,
    Collector = new require('istanbul').Collector,
    sourcefiles = ['index.js', 'extensions.js', 'render.js'],
    summary= Report.create('text-summary'),
    lcov = Report.create('lcovonly', ***REMOVED*** dir: path.join('coverage') ***REMOVED***),
    html = Report.create('html', ***REMOVED*** dir: path.join('coverage', 'html') ***REMOVED***);

function coverage() ***REMOVED***
    var mocha = new Mocha();
    var rep = function(runner) ***REMOVED***
      runner.on('end', function()***REMOVED***
        var cov = global.__coverage__,
            collector = new Collector();
        if (cov) ***REMOVED***
          mkdirp(path.join('coverage', 'html'), function(err) ***REMOVED***
            if (err) ***REMOVED*** throw err; ***REMOVED***
            collector.add(cov);
            summary.writeReport(collector, true);
            html.writeReport(collector, true);
            lcov.on('done', function() ***REMOVED***
              fs.readFile(path.join('coverage', 'lcov.info'), function(err, data) ***REMOVED***
                 if (err) ***REMOVED*** console.error(err); ***REMOVED***
                 coveralls.handleInput(data.toString(),
                   function (err) ***REMOVED*** if (err) ***REMOVED*** console.error(err); ***REMOVED*** ***REMOVED***);
  ***REMOVED***);
***REMOVED***);
            lcov.writeReport(collector, true);
  ***REMOVED***);
***REMOVED*** else ***REMOVED***
          console.warn('No coverage');
***REMOVED***
  ***REMOVED***);
***REMOVED***;
    var instrumenter = new Instrumenter();
    var instrumentedfiles = [];
    var processfile = function(source) ***REMOVED***
         fs.readFile(path.join('lib', source), function(err, data) ***REMOVED***
           if (err) ***REMOVED*** throw err; ***REMOVED***
           mkdirp('lib-cov', function(err) ***REMOVED***
             if (err) ***REMOVED*** throw err; ***REMOVED***
             fs.writeFile(path.join('lib-cov', source),
               instrumenter.instrumentSync(data.toString(),
                 path.join('lib', source)),
               function(err) ***REMOVED***
                 if (err) ***REMOVED*** throw err; ***REMOVED***
                 instrumentedfiles.push(source);
                 if (instrumentedfiles.length === sourcefiles.length) ***REMOVED***
                   fs.readdirSync('test').filter(function(file)***REMOVED***
                     return file.substr(-6)  === 'api.js' ||
                            file.substr(-11) === 'runtime.js' ||
                            file.substr(-7)  === 'spec.js';
   ***REMOVED***).forEach(function(file)***REMOVED***
                     mocha.addFile(
                       path.join('test', file)
                     );
   ***REMOVED***);
                   process.env.NODESASS_COV = 1;
                   mocha.reporter(rep).run(function(failures) ***REMOVED***
                     process.on('exit', function () ***REMOVED***
                       process.exit(failures);
 ***REMOVED***);
   ***REMOVED***);
 ***REMOVED***
   ***REMOVED***);
   ***REMOVED***);
 ***REMOVED***);
   ***REMOVED***;
    for (var i in sourcefiles) ***REMOVED***
      processfile(sourcefiles[i]);
***REMOVED***
***REMOVED***

/**
 * Run
 */

coverage();
