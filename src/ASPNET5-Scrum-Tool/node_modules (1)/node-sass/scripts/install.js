/*!
 * node-sass: scripts/install.js
 */

var fs = require('fs'),
    eol = require('os').EOL,
    mkdir = require('mkdirp'),
    npmconf = require('npmconf'),
    path = require('path'),
    request = require('request'),
    pkg = require('../package.json');

require('../lib/extensions');

/**
 * Download file, if succeeds save, if not delete
 *
 * @param ***REMOVED***String***REMOVED*** url
 * @param ***REMOVED***String***REMOVED*** dest
 * @param ***REMOVED***Function***REMOVED*** cb
 * @api private
 */

function download(url, dest, cb) ***REMOVED***
  var reportError = function(err) ***REMOVED***
    cb(['Cannot download "', url, '": ', eol, eol,
      typeof err.message === 'string' ? err.message : err, eol, eol,
      'Hint: If github.com is not accessible in your location', eol,
      '      try setting a proxy via HTTP_PROXY, e.g. ', eol, eol,
      '      export HTTP_PROXY=http://example.com:1234',eol, eol,
      'or configure npm proxy via', eol, eol,
      '      npm config set proxy http://example.com:8080'].join(''));
  ***REMOVED***;
  var successful = function(response) ***REMOVED***
    return response.statusCode >= 200 && response.statusCode < 300;
  ***REMOVED***;

  applyProxy(***REMOVED*** rejectUnauthorized: false ***REMOVED***, function(options) ***REMOVED***
    options.headers = ***REMOVED***
      'User-Agent': [
        'node/', process.version, ' ',
        'node-sass-installer/', pkg.version
      ].join('')
***REMOVED***;
    try ***REMOVED***
      request(url, options, function(err, response) ***REMOVED***
        if (err) ***REMOVED***
          reportError(err);
***REMOVED*** else if (!successful(response)) ***REMOVED***
            reportError(['HTTP error', response.statusCode, response.statusMessage].join(' '));
***REMOVED*** else ***REMOVED***
            cb();
***REMOVED***
  ***REMOVED***).on('response', function(response) ***REMOVED***
          if (successful(response)) ***REMOVED***
            response.pipe(fs.createWriteStream(dest));
  ***REMOVED***
  ***REMOVED***);
***REMOVED*** catch (err) ***REMOVED***
      cb(err);
***REMOVED***
  ***REMOVED***);
***REMOVED***

/**
 * Get applyProxy settings
 *
 * @param ***REMOVED***Object***REMOVED*** options
 * @param ***REMOVED***Function***REMOVED*** cb
 * @api private
 */

function applyProxy(options, cb) ***REMOVED***
  npmconf.load(***REMOVED******REMOVED***, function (er, conf) ***REMOVED***
    var proxyUrl;

    if (!er) ***REMOVED***
      proxyUrl = conf.get('https-proxy') ||
                 conf.get('proxy') ||
                 conf.get('http-proxy');
***REMOVED***

    var env = process.env;

    options.proxy = proxyUrl ||
                    env.HTTPS_PROXY ||
                    env.https_proxy ||
                    env.HTTP_PROXY ||
                    env.http_proxy;

    cb(options);
  ***REMOVED***);
***REMOVED***

/**
 * Check and download binary
 *
 * @api private
 */

function checkAndDownloadBinary() ***REMOVED***
  try ***REMOVED***
    process.sass.getBinaryPath(true);
    return;
  ***REMOVED*** catch (e) ***REMOVED*** ***REMOVED***

  mkdir(path.dirname(process.sass.binaryPath), function(err) ***REMOVED***
    if (err) ***REMOVED***
      console.error(err);
      return;
***REMOVED***

    download(process.sass.binaryUrl, process.sass.binaryPath, function(err) ***REMOVED***
      if (err) ***REMOVED***
        console.error(err);
        return;
  ***REMOVED***

      console.log('Binary downloaded and installed at', process.sass.binaryPath);
***REMOVED***);
  ***REMOVED***);
***REMOVED***

/**
 * Skip if CI
 */

if (process.env.SKIP_SASS_BINARY_DOWNLOAD_FOR_CI) ***REMOVED***
  console.log('Skipping downloading binaries on CI builds');
  return;
***REMOVED***

/**
 * If binary does not exsit, download it
 */

checkAndDownloadBinary();
