#ifndef SASS_AST_DEF_MACROS_H
#define SASS_AST_DEF_MACROS_H

// Helper class to switch a flag and revert once we go out of scope
template <class T>
class LocalOption ***REMOVED***
  private:
    T* var; // pointer to original variable
    T orig; // copy of the original option
  public:
    LocalOption(T& var)
***REMOVED***
      this->var = &var;
      this->orig = var;
***REMOVED***
    LocalOption(T& var, T orig)
***REMOVED***
      this->var = &var;
      this->orig = var;
      *(this->var) = orig;
***REMOVED***
    ~LocalOption() ***REMOVED***
      *(this->var) = this->orig;
***REMOVED***
***REMOVED***;

#define LOCAL_FLAG(name,opt) LocalOption<bool> flag_##name(name, opt)

#define ATTACH_OPERATIONS()\
virtual void perform(Operation<void>* op) ***REMOVED*** (*op)(this); ***REMOVED***\
virtual AST_Node* perform(Operation<AST_Node*>* op) ***REMOVED*** return (*op)(this); ***REMOVED***\
virtual Statement* perform(Operation<Statement*>* op) ***REMOVED*** return (*op)(this); ***REMOVED***\
virtual Expression* perform(Operation<Expression*>* op) ***REMOVED*** return (*op)(this); ***REMOVED***\
virtual Selector* perform(Operation<Selector*>* op) ***REMOVED*** return (*op)(this); ***REMOVED***\
virtual std::string perform(Operation<std::string>* op) ***REMOVED*** return (*op)(this); ***REMOVED***\
virtual union Sass_Value* perform(Operation<union Sass_Value*>* op) ***REMOVED*** return (*op)(this); ***REMOVED***\
virtual Value* perform(Operation<Value*>* op) ***REMOVED*** return (*op)(this); ***REMOVED***

#define ADD_PROPERTY(type, name)\
protected:\
  type name##_;\
public:\
  type name() const***REMOVED*** return name##_; ***REMOVED***\
  type name(type name##__) ***REMOVED*** return name##_ = name##__; ***REMOVED***\
private:

#define ADD_HASHED(type, name)\
protected:\
  type name##_;\
public:\
  type name() const***REMOVED*** return name##_; ***REMOVED***\
  type name(type name##__) ***REMOVED*** hash_ = 0; return name##_ = name##__; ***REMOVED***\
private:

#endif
