#include <iostream>
#include <typeinfo>
#include <string>

#include "listize.hpp"
#include "to_string.hpp"
#include "context.hpp"
#include "backtrace.hpp"
#include "error_handling.hpp"

namespace Sass ***REMOVED***

  Listize::Listize(Context& ctx)
  : ctx(ctx)
  ***REMOVED***  ***REMOVED***

  Expression* Listize::operator()(Selector_List* sel)
  ***REMOVED***
    List* l = SASS_MEMORY_NEW(ctx.mem, List, sel->pstate(), sel->length(), SASS_COMMA);
    for (size_t i = 0, L = sel->length(); i < L; ++i) ***REMOVED***
      if (!(*sel)[i]) continue;
      *l << (*sel)[i]->perform(this);
***REMOVED***
    return l;
  ***REMOVED***

  Expression* Listize::operator()(Compound_Selector* sel)
  ***REMOVED***
    To_String to_string;
    std::string str;
    for (size_t i = 0, L = sel->length(); i < L; ++i) ***REMOVED***
      Expression* e = (*sel)[i]->perform(this);
      if (e) str += e->perform(&to_string);
***REMOVED***
    return SASS_MEMORY_NEW(ctx.mem, String_Quoted, sel->pstate(), str);
  ***REMOVED***

  Expression* Listize::operator()(Complex_Selector* sel)
  ***REMOVED***
    List* l = SASS_MEMORY_NEW(ctx.mem, List, sel->pstate(), 2);

    Compound_Selector* head = sel->head();
    if (head && !head->is_empty_reference())
***REMOVED***
      Expression* hh = head->perform(this);
      if (hh) *l << hh;
***REMOVED***

    To_String to_string;
    std::string reference = ! sel->reference() ? ""
      : sel->reference()->perform(&to_string);
    switch(sel->combinator())
***REMOVED***
      case Complex_Selector::PARENT_OF:
        *l << SASS_MEMORY_NEW(ctx.mem, String_Quoted, sel->pstate(), ">");
      break;
      case Complex_Selector::ADJACENT_TO:
        *l << SASS_MEMORY_NEW(ctx.mem, String_Quoted, sel->pstate(), "+");
      break;
      case Complex_Selector::REFERENCE:
        *l << SASS_MEMORY_NEW(ctx.mem, String_Quoted, sel->pstate(), "/" + reference + "/");
      break;
      case Complex_Selector::PRECEDES:
        *l << SASS_MEMORY_NEW(ctx.mem, String_Quoted, sel->pstate(), "~");
      break;
      case Complex_Selector::ANCESTOR_OF:
      break;
***REMOVED***

    Complex_Selector* tail = sel->tail();
    if (tail)
***REMOVED***
      Expression* tt = tail->perform(this);
      if (tt && tt->concrete_type() == Expression::LIST)
  ***REMOVED*** *l += static_cast<List*>(tt); ***REMOVED***
      else if (tt) *l << static_cast<List*>(tt);
***REMOVED***
    if (l->length() == 0) return 0;
    return l;
  ***REMOVED***

  Expression* Listize::fallback_impl(AST_Node* n)
  ***REMOVED***
    return dynamic_cast<Expression*>(n);
  ***REMOVED***

***REMOVED***
