#ifndef SASS_OPERATION_H
#define SASS_OPERATION_H

#include "ast_fwd_decl.hpp"

namespace Sass ***REMOVED***

  template<typename T>
  class Operation ***REMOVED***
  public:
    virtual T operator()(AST_Node* x)               = 0;
    virtual ~Operation()***REMOVED*** ***REMOVED***
    // statements
    virtual T operator()(Block* x)                  = 0;
    virtual T operator()(Ruleset* x)                = 0;
    virtual T operator()(Propset* x)                = 0;
    virtual T operator()(Bubble* x)                 = 0;
    virtual T operator()(Supports_Block* x)          = 0;
    virtual T operator()(Media_Block* x)            = 0;
    virtual T operator()(At_Root_Block* x)          = 0;
    virtual T operator()(At_Rule* x)                = 0;
    virtual T operator()(Keyframe_Rule* x)          = 0;
    virtual T operator()(Declaration* x)            = 0;
    virtual T operator()(Assignment* x)             = 0;
    virtual T operator()(Import* x)                 = 0;
    virtual T operator()(Import_Stub* x)            = 0;
    virtual T operator()(Warning* x)                = 0;
    virtual T operator()(Error* x)                  = 0;
    virtual T operator()(Debug* x)                  = 0;
    virtual T operator()(Comment* x)                = 0;
    virtual T operator()(If* x)                     = 0;
    virtual T operator()(For* x)                    = 0;
    virtual T operator()(Each* x)                   = 0;
    virtual T operator()(While* x)                  = 0;
    virtual T operator()(Return* x)                 = 0;
    virtual T operator()(Content* x)                = 0;
    virtual T operator()(Extension* x)              = 0;
    virtual T operator()(Definition* x)             = 0;
    virtual T operator()(Mixin_Call* x)             = 0;
    // expressions
    virtual T operator()(List* x)                   = 0;
    virtual T operator()(Map* x)                    = 0;
    virtual T operator()(Binary_Expression* x)      = 0;
    virtual T operator()(Unary_Expression* x)       = 0;
    virtual T operator()(Function_Call* x)          = 0;
    virtual T operator()(Function_Call_Schema* x)   = 0;
    virtual T operator()(Custom_Warning* x)         = 0;
    virtual T operator()(Custom_Error* x)           = 0;
    virtual T operator()(Variable* x)               = 0;
    virtual T operator()(Textual* x)                = 0;
    virtual T operator()(Number* x)                 = 0;
    virtual T operator()(Color* x)                  = 0;
    virtual T operator()(Boolean* x)                = 0;
    virtual T operator()(String_Schema* x)          = 0;
    virtual T operator()(String_Quoted* x)          = 0;
    virtual T operator()(String_Constant* x)        = 0;
    virtual T operator()(Supports_Condition* x)     = 0;
    virtual T operator()(Supports_Operator* x)      = 0;
    virtual T operator()(Supports_Negation* x)      = 0;
    virtual T operator()(Supports_Declaration* x)   = 0;
    virtual T operator()(Supports_Interpolation* x) = 0;
    virtual T operator()(Media_Query* x)            = 0;
    virtual T operator()(Media_Query_Expression* x) = 0;
    virtual T operator()(At_Root_Expression* x)     = 0;
    virtual T operator()(Null* x)                   = 0;
    virtual T operator()(Parent_Selector* x)        = 0;
    // parameters and arguments
    virtual T operator()(Parameter* x)              = 0;
    virtual T operator()(Parameters* x)             = 0;
    virtual T operator()(Argument* x)               = 0;
    virtual T operator()(Arguments* x)              = 0;
    // selectors
    virtual T operator()(Selector_Schema* x)        = 0;
    virtual T operator()(Selector_Placeholder* x)   = 0;
    virtual T operator()(Type_Selector* x)          = 0;
    virtual T operator()(Selector_Qualifier* x)     = 0;
    virtual T operator()(Attribute_Selector* x)     = 0;
    virtual T operator()(Pseudo_Selector* x)        = 0;
    virtual T operator()(Wrapped_Selector* x)       = 0;
    virtual T operator()(Compound_Selector* x)      = 0;
    virtual T operator()(Complex_Selector* x)       = 0;
    virtual T operator()(Selector_List* x)          = 0;

    template <typename U>
    T fallback(U x) ***REMOVED*** return T(); ***REMOVED***
  ***REMOVED***;

  template <typename T, typename D>
  class Operation_CRTP : public Operation<T> ***REMOVED***
  public:
    virtual T operator()(AST_Node* x)   ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual ~Operation_CRTP()                       = 0;
    // statements
    virtual T operator()(Block* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Ruleset* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Propset* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Bubble* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Supports_Block* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Media_Block* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(At_Root_Block* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(At_Rule* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Keyframe_Rule* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Declaration* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Assignment* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Import* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Import_Stub* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Warning* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Error* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Debug* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Comment* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(If* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(For* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Each* x)   ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(While* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Return* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Content* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Extension* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Definition* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Mixin_Call* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    // expressions
    virtual T operator()(List* x)   ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Map* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Binary_Expression* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Unary_Expression* x)   ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Function_Call* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Function_Call_Schema* x)   ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Custom_Warning* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Custom_Error* x)   ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Variable* x)   ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Textual* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Number* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Color* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Boolean* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(String_Schema* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(String_Constant* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(String_Quoted* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Supports_Condition* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Supports_Operator* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Supports_Negation* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Supports_Declaration* x)   ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Supports_Interpolation* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Media_Query* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Media_Query_Expression* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(At_Root_Expression* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Null* x)   ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Parent_Selector* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    // parameters and arguments
    virtual T operator()(Parameter* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Parameters* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Argument* x)   ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Arguments* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    // selectors
    virtual T operator()(Selector_Schema* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Selector_Placeholder* x)   ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Type_Selector* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Selector_Qualifier* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Attribute_Selector* x) ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Pseudo_Selector* x)***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Wrapped_Selector* x)   ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Compound_Selector* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Complex_Selector* x)   ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***
    virtual T operator()(Selector_List* x)  ***REMOVED*** return static_cast<D*>(this)->fallback(x); ***REMOVED***

    template <typename U>
    T fallback(U x) ***REMOVED*** return T(); ***REMOVED***
  ***REMOVED***;
  template<typename T, typename D>
  inline Operation_CRTP<T, D>::~Operation_CRTP()***REMOVED*** ***REMOVED***

***REMOVED***

#endif
