#include "position.hpp"

namespace Sass ***REMOVED***


  Offset::Offset(const char* string)
  : line(0), column(0)
  ***REMOVED***
    *this = inc(string, string + strlen(string));
  ***REMOVED***

  Offset::Offset(const std::string& text)
  : line(0), column(0)
  ***REMOVED***
    *this = inc(text.c_str(), text.c_str() + text.size());
  ***REMOVED***

  Offset::Offset(const size_t line, const size_t column)
  : line(line), column(column) ***REMOVED*** ***REMOVED***

  // init/create instance from const char substring
  Offset Offset::init(const char* beg, const char* end)
  ***REMOVED***
    Offset offset(0, 0);
    if (end == 0) ***REMOVED***
      end += strlen(beg);
***REMOVED***
    offset.add(beg, end);
    return offset;
  ***REMOVED***

  // increase offset by given string (mostly called by lexer)
  // increase line counter and count columns on the last line
  // ToDo: make the col count utf8 aware
  Offset Offset::add(const char* begin, const char* end)
  ***REMOVED***
    if (end == 0) return *this;
    while (begin < end && *begin) ***REMOVED***
      if (*begin == '\n') ***REMOVED***
        ++ line;
        // start new line
        column = 0;
  ***REMOVED*** else ***REMOVED***
        ++ column;
  ***REMOVED***
      ++begin;
***REMOVED***
    return *this;
  ***REMOVED***

  // increase offset by given string (mostly called by lexer)
  // increase line counter and count columns on the last line
  Offset Offset::inc(const char* begin, const char* end) const
  ***REMOVED***
    Offset offset(line, column);
    offset.add(begin, end);
    return offset;
  ***REMOVED***

  bool Offset::operator== (const Offset &pos) const
  ***REMOVED***
    return line == pos.line && column == pos.column;
  ***REMOVED***

  bool Offset::operator!= (const Offset &pos) const
  ***REMOVED***
    return line != pos.line || column != pos.column;
  ***REMOVED***

  void Offset::operator+= (const Offset &off)
  ***REMOVED***
    *this = Offset(line + off.line, off.line > 0 ? off.column : column + off.column);
  ***REMOVED***

  Offset Offset::operator+ (const Offset &off) const
  ***REMOVED***
    return Offset(line + off.line, off.line > 0 ? off.column : column + off.column);
  ***REMOVED***

  Offset Offset::operator- (const Offset &off) const
  ***REMOVED***
    return Offset(line - off.line, off.line == line ? column - off.column : column);
  ***REMOVED***

  Position::Position(const size_t file)
  : Offset(0, 0), file(file) ***REMOVED*** ***REMOVED***

  Position::Position(const size_t file, const Offset& offset)
  : Offset(offset), file(file) ***REMOVED*** ***REMOVED***

  Position::Position(const size_t line, const size_t column)
  : Offset(line, column), file(-1) ***REMOVED*** ***REMOVED***

  Position::Position(const size_t file, const size_t line, const size_t column)
  : Offset(line, column), file(file) ***REMOVED*** ***REMOVED***


  ParserState::ParserState(const char* path, const char* src, const size_t file)
  : Position(file, 0, 0), path(path), src(src), offset(0, 0), token() ***REMOVED*** ***REMOVED***

  ParserState::ParserState(const char* path, const char* src, const Position& position, Offset offset)
  : Position(position), path(path), src(src), offset(offset), token() ***REMOVED*** ***REMOVED***

  ParserState::ParserState(const char* path, const char* src, const Token& token, const Position& position, Offset offset)
  : Position(position), path(path), src(src), offset(offset), token(token) ***REMOVED*** ***REMOVED***

  Position Position::add(const char* begin, const char* end)
  ***REMOVED***
    Offset::add(begin, end);
    return *this;
  ***REMOVED***

  Position Position::inc(const char* begin, const char* end) const
  ***REMOVED***
    Offset offset(line, column);
    offset = offset.inc(begin, end);
    return Position(file, offset);
  ***REMOVED***

  bool Position::operator== (const Position &pos) const
  ***REMOVED***
    return file == pos.file && line == pos.line && column == pos.column;
  ***REMOVED***

  bool Position::operator!= (const Position &pos) const
  ***REMOVED***
    return file == pos.file || line != pos.line || column != pos.column;
  ***REMOVED***

  void Position::operator+= (const Offset &off)
  ***REMOVED***
    *this = Position(file, line + off.line, off.line > 0 ? off.column : column + off.column);
  ***REMOVED***

  const Position Position::operator+ (const Offset &off) const
  ***REMOVED***
    return Position(file, line + off.line, off.line > 0 ? off.column : column + off.column);
  ***REMOVED***

  const Offset Position::operator- (const Offset &off) const
  ***REMOVED***
    return Offset(line - off.line, off.line == line ? column - off.column : column);
  ***REMOVED***

  /* not used anymore - remove?
  std::ostream& operator<<(std::ostream& strm, const Offset& off)
  ***REMOVED***
    if (off.line == string::npos) strm << "-1:"; else strm << off.line << ":";
    if (off.column == string::npos) strm << "-1"; else strm << off.column;
    return strm;
  ***REMOVED*** */

  /* not used anymore - remove?
  std::ostream& operator<<(std::ostream& strm, const Position& pos)
  ***REMOVED***
    if (pos.file != string::npos) strm << pos.file << ":";
    if (pos.line == string::npos) strm << "-1:"; else strm << pos.line << ":";
    if (pos.column == string::npos) strm << "-1"; else strm << pos.column;
    return strm;
  ***REMOVED*** */

***REMOVED***
