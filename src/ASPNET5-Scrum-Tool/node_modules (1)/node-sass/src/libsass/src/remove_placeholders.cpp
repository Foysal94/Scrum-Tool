#include "remove_placeholders.hpp"
#include "context.hpp"
#include "inspect.hpp"
#include "to_string.hpp"
#include <iostream>

namespace Sass ***REMOVED***

    Remove_Placeholders::Remove_Placeholders(Context& ctx)
    : ctx(ctx)
***REMOVED*** ***REMOVED***

    void Remove_Placeholders::operator()(Block* b) ***REMOVED***
        for (size_t i = 0, L = b->length(); i < L; ++i) ***REMOVED***
            (*b)[i]->perform(this);
***REMOVED***
***REMOVED***

    void Remove_Placeholders::operator()(Ruleset* r) ***REMOVED***
        // Create a new selector group without placeholders
        Selector_List* sl = static_cast<Selector_List*>(r->selector());

        if (sl) ***REMOVED***
            Selector_List* new_sl = SASS_MEMORY_NEW(ctx.mem, Selector_List, sl->pstate());

            for (size_t i = 0, L = sl->length(); i < L; ++i) ***REMOVED***
                if (!(*sl)[i]->contains_placeholder()) ***REMOVED***
                    *new_sl << (*sl)[i];
***REMOVED***
***REMOVED***

            // Set the new placeholder selector list
            r->selector(new_sl);
***REMOVED***

        // Iterate into child blocks
        Block* b = r->block();

        for (size_t i = 0, L = b->length(); i < L; ++i) ***REMOVED***
            if ((*b)[i]) (*b)[i]->perform(this);
***REMOVED***
***REMOVED***

    void Remove_Placeholders::operator()(Media_Block* m) ***REMOVED***
        Block* b = m->block();
        for (size_t i = 0, L = b->length(); i < L; ++i) ***REMOVED***
            if ((*b)[i]) (*b)[i]->perform(this);
***REMOVED***
***REMOVED***

    void Remove_Placeholders::operator()(At_Rule* a) ***REMOVED***
        if (a->block()) a->block()->perform(this);
***REMOVED***

***REMOVED***
