#include <cstring>
#include "util.hpp"
#include "context.hpp"
#include "sass/functions.h"
#include "sass_functions.hpp"

extern "C" ***REMOVED***
  using namespace Sass;

  Sass_Function_List ADDCALL sass_make_function_list(size_t length)
  ***REMOVED***
    return (Sass_Function_List) calloc(length + 1, sizeof(Sass_Function_Entry));
  ***REMOVED***

  Sass_Function_Entry ADDCALL sass_make_function(const char* signature, Sass_Function_Fn function, void* cookie)
  ***REMOVED***
    Sass_Function_Entry cb = (Sass_Function_Entry) calloc(1, sizeof(Sass_Function));
    if (cb == 0) return 0;
    cb->signature = signature;
    cb->function = function;
    cb->cookie = cookie;
    return cb;
  ***REMOVED***

  // Setters and getters for callbacks on function lists
  Sass_Function_Entry ADDCALL sass_function_get_list_entry(Sass_Function_List list, size_t pos) ***REMOVED*** return list[pos]; ***REMOVED***
  void sass_function_set_list_entry(Sass_Function_List list, size_t pos, Sass_Function_Entry cb) ***REMOVED*** list[pos] = cb; ***REMOVED***

  const char* ADDCALL sass_function_get_signature(Sass_Function_Entry cb) ***REMOVED*** return cb->signature; ***REMOVED***
  Sass_Function_Fn ADDCALL sass_function_get_function(Sass_Function_Entry cb) ***REMOVED*** return cb->function; ***REMOVED***
  void* ADDCALL sass_function_get_cookie(Sass_Function_Entry cb) ***REMOVED*** return cb->cookie; ***REMOVED***

  Sass_Importer_Entry ADDCALL sass_make_importer(Sass_Importer_Fn importer, double priority, void* cookie)
  ***REMOVED***
    Sass_Importer_Entry cb = (Sass_Importer_Entry) calloc(1, sizeof(Sass_Importer));
    if (cb == 0) return 0;
    cb->importer = importer;
    cb->priority = priority;
    cb->cookie = cookie;
    return cb;
  ***REMOVED***

  Sass_Importer_Fn ADDCALL sass_importer_get_function(Sass_Importer_Entry cb) ***REMOVED*** return cb->importer; ***REMOVED***
  double ADDCALL sass_importer_get_priority (Sass_Importer_Entry cb) ***REMOVED*** return cb->priority; ***REMOVED***
  void* ADDCALL sass_importer_get_cookie(Sass_Importer_Entry cb) ***REMOVED*** return cb->cookie; ***REMOVED***

  // Just in case we have some stray import structs
  void ADDCALL sass_delete_importer (Sass_Importer_Entry cb)
  ***REMOVED***
    free(cb);
  ***REMOVED***

  // Creator for sass custom importer function list
  Sass_Importer_List ADDCALL sass_make_importer_list(size_t length)
  ***REMOVED***
    return (Sass_Importer_List) calloc(length + 1, sizeof(Sass_Importer_Entry));
  ***REMOVED***

  Sass_Importer_Entry ADDCALL sass_importer_get_list_entry(Sass_Importer_List list, size_t idx) ***REMOVED*** return list[idx]; ***REMOVED***
  void ADDCALL sass_importer_set_list_entry(Sass_Importer_List list, size_t idx, Sass_Importer_Entry cb) ***REMOVED*** list[idx] = cb; ***REMOVED***

  // Creator for sass custom importer return argument list
  Sass_Import_List ADDCALL sass_make_import_list(size_t length)
  ***REMOVED***
    return (Sass_Import**) calloc(length + 1, sizeof(Sass_Import*));
  ***REMOVED***

  // Creator for a single import entry returned by the custom importer inside the list
  // We take ownership of the memory for source and srcmap (freed when context is destroyd)
  Sass_Import_Entry ADDCALL sass_make_import(const char* imp_path, const char* abs_path, char* source, char* srcmap)
  ***REMOVED***
    Sass_Import* v = (Sass_Import*) calloc(1, sizeof(Sass_Import));
    if (v == 0) return 0;
    v->imp_path = imp_path ? sass_strdup(imp_path) : 0;
    v->abs_path = abs_path ? sass_strdup(abs_path) : 0;
    v->source = source;
    v->srcmap = srcmap;
    v->error = 0;
    v->line = -1;
    v->column = -1;
    return v;
  ***REMOVED***

  // Older style, but somehow still valid - keep around or deprecate?
  Sass_Import_Entry ADDCALL sass_make_import_entry(const char* path, char* source, char* srcmap)
  ***REMOVED***
    return sass_make_import(path, path, source, srcmap);
  ***REMOVED***

  // Upgrade a normal import entry to throw an error (original path can be re-used by error reporting)
  Sass_Import_Entry ADDCALL sass_import_set_error(Sass_Import_Entry import, const char* error, size_t line, size_t col)
  ***REMOVED***
    if (import == 0) return 0;
    if (import->error) free(import->error);
    import->error = error ? sass_strdup(error) : 0;
    import->line = line ? line : -1;
    import->column = col ? col : -1;
    return import;
  ***REMOVED***

  // Setters and getters for entries on the import list
  void ADDCALL sass_import_set_list_entry(Sass_Import_List list, size_t idx, Sass_Import_Entry entry) ***REMOVED*** list[idx] = entry; ***REMOVED***
  Sass_Import_Entry ADDCALL sass_import_get_list_entry(Sass_Import_List list, size_t idx) ***REMOVED*** return list[idx]; ***REMOVED***

  // Deallocator for the allocated memory
  void ADDCALL sass_delete_import_list(Sass_Import_List list)
  ***REMOVED***
    Sass_Import_List it = list;
    if (list == 0) return;
    while(*list) ***REMOVED***
      sass_delete_import(*list);
      ++list;
***REMOVED***
    free(it);
  ***REMOVED***

  // Just in case we have some stray import structs
  void ADDCALL sass_delete_import(Sass_Import_Entry import)
  ***REMOVED***
    free(import->imp_path);
    free(import->abs_path);
    free(import->source);
    free(import->srcmap);
    free(import->error);
    free(import);
  ***REMOVED***

  // Getter for import entry
  const char* ADDCALL sass_import_get_imp_path(Sass_Import_Entry entry) ***REMOVED*** return entry->imp_path; ***REMOVED***
  const char* ADDCALL sass_import_get_abs_path(Sass_Import_Entry entry) ***REMOVED*** return entry->abs_path; ***REMOVED***
  const char* ADDCALL sass_import_get_source(Sass_Import_Entry entry) ***REMOVED*** return entry->source; ***REMOVED***
  const char* ADDCALL sass_import_get_srcmap(Sass_Import_Entry entry) ***REMOVED*** return entry->srcmap; ***REMOVED***

  // Getter for import error entry
  size_t ADDCALL sass_import_get_error_line(Sass_Import_Entry entry) ***REMOVED*** return entry->line; ***REMOVED***
  size_t ADDCALL sass_import_get_error_column(Sass_Import_Entry entry) ***REMOVED*** return entry->column; ***REMOVED***
  const char* ADDCALL sass_import_get_error_message(Sass_Import_Entry entry) ***REMOVED*** return entry->error; ***REMOVED***

  // Explicit functions to take ownership of the memory
  // Resets our own property since we do not know if it is still alive
  char* ADDCALL sass_import_take_source(Sass_Import_Entry entry) ***REMOVED*** char* ptr = entry->source; entry->source = 0; return ptr; ***REMOVED***
  char* ADDCALL sass_import_take_srcmap(Sass_Import_Entry entry) ***REMOVED*** char* ptr = entry->srcmap; entry->srcmap = 0; return ptr; ***REMOVED***

***REMOVED***
