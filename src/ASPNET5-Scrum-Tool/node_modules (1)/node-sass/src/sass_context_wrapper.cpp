#include "sass_context_wrapper.h"

extern "C" ***REMOVED***
  using namespace std;

  void compile_it(uv_work_t* req) ***REMOVED***
    sass_context_wrapper* ctx_w = (sass_context_wrapper*)req->data;

    if (ctx_w->dctx) ***REMOVED***
      compile_data(ctx_w->dctx);
***REMOVED***
    else if (ctx_w->fctx) ***REMOVED***
      compile_file(ctx_w->fctx);
***REMOVED***
  ***REMOVED***

  void compile_data(struct Sass_Data_Context* dctx) ***REMOVED***
    sass_compile_data_context(dctx);
  ***REMOVED***

  void compile_file(struct Sass_File_Context* fctx) ***REMOVED***
    sass_compile_file_context(fctx);
  ***REMOVED***

  sass_context_wrapper* sass_make_context_wrapper() ***REMOVED***
    return (sass_context_wrapper*)calloc(1, sizeof(sass_context_wrapper));
  ***REMOVED***

  void sass_free_context_wrapper(sass_context_wrapper* ctx_w) ***REMOVED***
    if (ctx_w->dctx) ***REMOVED***
      sass_delete_data_context(ctx_w->dctx);
***REMOVED***
    else if (ctx_w->fctx) ***REMOVED***
      sass_delete_file_context(ctx_w->fctx);
***REMOVED***

    delete ctx_w->error_callback;
    delete ctx_w->success_callback;

    ctx_w->result.Reset();

    free(ctx_w->include_path);
    free(ctx_w->linefeed);
    free(ctx_w->out_file);
    free(ctx_w->source_map);
    free(ctx_w->source_map_root);
    free(ctx_w->indent);

    std::vector<CustomImporterBridge *>::iterator imp_it = ctx_w->importer_bridges.begin();
    while (imp_it != ctx_w->importer_bridges.end()) ***REMOVED***
      CustomImporterBridge* p = *imp_it;
      imp_it = ctx_w->importer_bridges.erase(imp_it);
      delete p;
***REMOVED***
    std::vector<CustomFunctionBridge *>::iterator func_it = ctx_w->function_bridges.begin();
    while (func_it != ctx_w->function_bridges.end()) ***REMOVED***
      CustomFunctionBridge* p = *func_it;
      func_it = ctx_w->function_bridges.erase(func_it);
      delete p;
***REMOVED***

    free(ctx_w);
  ***REMOVED***
***REMOVED***
