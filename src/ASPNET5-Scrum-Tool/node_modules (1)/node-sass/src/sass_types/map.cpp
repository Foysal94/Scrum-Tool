#include <nan.h>
#include "map.h"

namespace SassTypes
***REMOVED***
  Map::Map(Sass_Value* v) : SassValueWrapper(v) ***REMOVED******REMOVED***

  Sass_Value* Map::construct(const std::vector<v8::Local<v8::Value>> raw_val, Sass_Value **out) ***REMOVED***
    size_t length = 0;

    if (raw_val.size() >= 1) ***REMOVED***
      if (!raw_val[0]->IsNumber()) ***REMOVED***
        return fail("First argument should be an integer.", out);
  ***REMOVED***

      length = Nan::To<uint32_t>(raw_val[0]).FromJust();
***REMOVED***

    return *out = sass_make_map(length);
  ***REMOVED***

  void Map::initPrototype(v8::Local<v8::FunctionTemplate> proto) ***REMOVED***
    Nan::SetPrototypeMethod(proto, "getLength", GetLength);
    Nan::SetPrototypeMethod(proto, "getKey", GetKey);
    Nan::SetPrototypeMethod(proto, "setKey", SetKey);
    Nan::SetPrototypeMethod(proto, "getValue", GetValue);
    Nan::SetPrototypeMethod(proto, "setValue", SetValue);
  ***REMOVED***

  NAN_METHOD(Map::GetValue) ***REMOVED***

    if (info.Length() != 1) ***REMOVED***
      return Nan::ThrowTypeError(Nan::New("Expected just one argument").ToLocalChecked());
***REMOVED***

    if (!info[0]->IsNumber()) ***REMOVED***
      return Nan::ThrowTypeError(Nan::New("Supplied index should be an integer").ToLocalChecked());
***REMOVED***

    Sass_Value* map = unwrap(info.This())->value;
    size_t index = Nan::To<uint32_t>(info[0]).FromJust();


    if (index >= sass_map_get_length(map)) ***REMOVED***
      return Nan::ThrowRangeError(Nan::New("Out of bound index").ToLocalChecked());
***REMOVED***

    info.GetReturnValue().Set(Factory::create(sass_map_get_value(map, Nan::To<uint32_t>(info[0]).FromJust()))->get_js_object());
  ***REMOVED***

  NAN_METHOD(Map::SetValue) ***REMOVED***
    if (info.Length() != 2) ***REMOVED***
      return Nan::ThrowTypeError(Nan::New("Expected two arguments").ToLocalChecked());
***REMOVED***

    if (!info[0]->IsNumber()) ***REMOVED***
      return Nan::ThrowTypeError(Nan::New("Supplied index should be an integer").ToLocalChecked());
***REMOVED***

    if (!info[1]->IsObject()) ***REMOVED***
      return Nan::ThrowTypeError(Nan::New("Supplied value should be a SassValue object").ToLocalChecked());
***REMOVED***

    Value* sass_value = Factory::unwrap(info[1]);
    if (sass_value) ***REMOVED***
      sass_map_set_value(unwrap(info.This())->value, Nan::To<uint32_t>(info[0]).FromJust(), sass_value->get_sass_value());
***REMOVED*** else ***REMOVED***
      Nan::ThrowTypeError(Nan::New<v8::String>("A SassValue is expected as a map value").ToLocalChecked());
***REMOVED***
  ***REMOVED***

  NAN_METHOD(Map::GetKey) ***REMOVED***

    if (info.Length() != 1) ***REMOVED***
      return Nan::ThrowTypeError(Nan::New("Expected just one argument").ToLocalChecked());
***REMOVED***

    if (!info[0]->IsNumber()) ***REMOVED***
      return Nan::ThrowTypeError(Nan::New("Supplied index should be an integer").ToLocalChecked());
***REMOVED***

    Sass_Value* map = unwrap(info.This())->value;
    size_t index = Nan::To<uint32_t>(info[0]).FromJust();


    if (index >= sass_map_get_length(map)) ***REMOVED***
      return Nan::ThrowRangeError(Nan::New("Out of bound index").ToLocalChecked());
***REMOVED***

    info.GetReturnValue().Set(Factory::create(sass_map_get_key(map, Nan::To<uint32_t>(info[0]).FromJust()))->get_js_object());
  ***REMOVED***

  NAN_METHOD(Map::SetKey) ***REMOVED***
    if (info.Length() != 2) ***REMOVED***
      return Nan::ThrowTypeError(Nan::New("Expected two arguments").ToLocalChecked());
***REMOVED***

    if (!info[0]->IsNumber()) ***REMOVED***
      return Nan::ThrowTypeError(Nan::New("Supplied index should be an integer").ToLocalChecked());
***REMOVED***

    if (!info[1]->IsObject()) ***REMOVED***
      return Nan::ThrowTypeError(Nan::New("Supplied value should be a SassValue object").ToLocalChecked());
***REMOVED***

    Value* sass_value = Factory::unwrap(info[1]);
    if (sass_value) ***REMOVED***
      sass_map_set_key(unwrap(info.This())->value, Nan::To<uint32_t>(info[0]).FromJust(), sass_value->get_sass_value());
***REMOVED*** else ***REMOVED***
      Nan::ThrowTypeError(Nan::New<v8::String>("A SassValue is expected as a map key").ToLocalChecked());
***REMOVED***
  ***REMOVED***

  NAN_METHOD(Map::GetLength) ***REMOVED***
    info.GetReturnValue().Set(Nan::New<v8::Number>(sass_map_get_length(unwrap(info.This())->value)));
  ***REMOVED***
***REMOVED***
